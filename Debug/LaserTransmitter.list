
LaserTransmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007988  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dfc  08007dfc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e04  08007e04  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000084  08007e98  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  08007e98  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba39  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003860  00000000  00000000  0003baed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0003f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00040b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e42b  00000000  00000000  00042268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bad9  00000000  00000000  00070693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a2a6  00000000  00000000  0008c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00196412  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072b4  00000000  00000000  00196464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b20 	.word	0x08007b20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08007b20 	.word	0x08007b20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_ZN13GenericDriverD1Ev>:

    /// Constructor
    GenericDriver();

    /// Generic destructor to prevent warnings when objects are dynamically allocated
    virtual ~GenericDriver() {};
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <_ZN13GenericDriverD1Ev+0x1c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	08007bf4 	.word	0x08007bf4

080005c4 <_ZN13GenericDriverD0Ev>:
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ffe9 	bl	80005a4 <_ZN13GenericDriverD1Ev>
 80005d2:	2120      	movs	r1, #32
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f006 fa0b 	bl	80069f0 <_ZdlPvj>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <_ZN3ASKC1Ethhhb>:
};

// This is the value of the start symbol after 6-bit conversion and nybble swapping
#define ASK_START_SYMBOL 0xb38

ASK::ASK(uint16_t speed, uint8_t rxPin, uint8_t txPin, uint8_t pttPin, bool pttInverted)
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4603      	mov	r3, r0
 80005f4:	807b      	strh	r3, [r7, #2]
 80005f6:	460b      	mov	r3, r1
 80005f8:	707b      	strb	r3, [r7, #1]
 80005fa:	4613      	mov	r3, r2
 80005fc:	703b      	strb	r3, [r7, #0]
    _speed(speed),
    _rxPin(rxPin),
    _txPin(txPin),
    _pttPin(pttPin),
    _rxInverted(false),
    _pttInverted(pttInverted)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fd5f 	bl	80010c4 <_ZN13GenericDriverC1Ev>
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <_ZN3ASKC1Ethhhb+0x80>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	887a      	ldrh	r2, [r7, #2]
 8000610:	841a      	strh	r2, [r3, #32]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	787a      	ldrb	r2, [r7, #1]
 8000616:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	783a      	ldrb	r2, [r7, #0]
 800061e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7e3a      	ldrb	r2, [r7, #24]
 8000626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7f3a      	ldrb	r2, [r7, #28]
 8000636:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
{
    // Initialise the first 8 nibbles of the tx buffer to be the standard
    // preamble. We will append messages after that. 0x38, 0x2c is the start symbol before
    // 6-bit conversion to RH_ASK_START_SYMBOL
    uint8_t preamble[ASK_PREAMBLE_LEN] = {0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x38, 0x2c};
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <_ZN3ASKC1Ethhhb+0x84>)
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000644:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(_txBuf, preamble, sizeof(preamble));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3379      	adds	r3, #121	; 0x79
 800064c:	461a      	mov	r2, r3
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	cb03      	ldmia	r3!, {r0, r1}
 8000654:	6010      	str	r0, [r2, #0]
 8000656:	6051      	str	r1, [r2, #4]
}
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08007b74 	.word	0x08007b74
 8000668:	08007b38 	.word	0x08007b38

0800066c <_ZN3ASK4initEv>:

bool ASK::init()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    if (!GenericDriver::init())
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fd52 	bl	8001120 <_ZN13GenericDriver4initEv>
 800067c:	4603      	mov	r3, r0
 800067e:	f083 0301 	eor.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <_ZN3ASK4initEv+0x20>
	return false;
 8000688:	2300      	movs	r3, #0
 800068a:	e006      	b.n	800069a <_ZN3ASK4initEv+0x2e>
    thisASKDriver = this;
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <_ZN3ASK4initEv+0x38>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6013      	str	r3, [r2, #0]
//    pinMode(_txPin, OUTPUT);
//    pinMode(_rxPin, INPUT);
//    pinMode(_pttPin, OUTPUT);

    // Ready to go
    setModeIdle();
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f808 	bl	80006a8 <_ZN3ASK11setModeIdleEv>
//    timerSetup(); // should be handled by main.c

    return true;
 8000698:	2301      	movs	r3, #1
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000a0 	.word	0x200000a0

080006a8 <_ZN3ASK11setModeIdleEv>:
////    timer.setCaptureCompare(1, us - 1, MICROSEC_COMPARE_FORMAT);
////    timer.attachInterrupt(interrupt); // should be attached in main.c
//}

void INTERRUPT_ATTR ASK::setModeIdle()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    if (_mode != ModeIdle)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	bf14      	ite	ne
 80006ba:	2301      	movne	r3, #1
 80006bc:	2300      	moveq	r3, #0
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00e      	beq.n	80006e2 <_ZN3ASK11setModeIdleEv+0x3a>
    {
	// Disable the transmitter hardware
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2140      	movs	r1, #64	; 0x40
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006cc:	f002 f97c 	bl	80029c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <_ZN3ASK11setModeIdleEv+0x44>)
 80006d8:	f002 f976 	bl	80029c8 <HAL_GPIO_WritePin>
		_mode = ModeIdle;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2202      	movs	r2, #2
 80006e0:	711a      	strb	r2, [r3, #4]
    }
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	48000c00 	.word	0x48000c00

080006f0 <_ZN3ASK9setModeTxEv>:

void ASK::setModeTx()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    if (_mode != ModeTx)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b03      	cmp	r3, #3
 8000700:	bf14      	ite	ne
 8000702:	2301      	movne	r3, #1
 8000704:	2300      	moveq	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d014      	beq.n	8000736 <_ZN3ASK9setModeTxEv+0x46>
    {
	// PRepare state varibles for a new transmission
	_txIndex = 0;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	_txBit = 0;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	_txSample = 0;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	// Enable the transmitter hardware
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <_ZN3ASK9setModeTxEv+0x50>)
 800072c:	f002 f94c 	bl	80029c8 <HAL_GPIO_WritePin>

	_mode = ModeTx;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2203      	movs	r2, #3
 8000734:	711a      	strb	r2, [r3, #4]
    }
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	48000c00 	.word	0x48000c00

08000744 <_ZN3ASK9setModeRxEv>:

void ASK::setModeRx() {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if (_mode != ModeRx) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b04      	cmp	r3, #4
 8000754:	bf14      	ite	ne
 8000756:	2301      	movne	r3, #1
 8000758:	2300      	moveq	r3, #0
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00e      	beq.n	800077e <_ZN3ASK9setModeRxEv+0x3a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <_ZN3ASK9setModeRxEv+0x44>)
 8000768:	f002 f92e 	bl	80029c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f002 f928 	bl	80029c8 <HAL_GPIO_WritePin>
		_mode = ModeIdle;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2202      	movs	r2, #2
 800077c:	711a      	strb	r2, [r3, #4]
	}
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	48000c00 	.word	0x48000c00

0800078c <_ZN3ASK9availableEv>:

// Call this often
bool ASK::available()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    if (_mode == ModeTx)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b03      	cmp	r3, #3
 800079c:	bf0c      	ite	eq
 800079e:	2301      	moveq	r3, #1
 80007a0:	2300      	movne	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <_ZN3ASK9availableEv+0x20>
	return false;
 80007a8:	2300      	movs	r3, #0
 80007aa:	e013      	b.n	80007d4 <_ZN3ASK9availableEv+0x48>
    setModeRx();
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ffc9 	bl	8000744 <_ZN3ASK9setModeRxEv>
    if (_rxBufFull)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d006      	beq.n	80007cc <_ZN3ASK9availableEv+0x40>
    {
	validateRxBuf();
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 fa12 	bl	8000be8 <_ZN3ASK13validateRxBufEv>
	_rxBufFull= false;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    }
    return _rxBufValid;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80007d2:	b2db      	uxtb	r3, r3
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN3ASK4recvEPhS0_>:

bool INTERRUPT_ATTR ASK::recv(uint8_t* buf, uint8_t* len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
    if (!available())
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	330c      	adds	r3, #12
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	4798      	blx	r3
 80007f4:	4603      	mov	r3, r0
 80007f6:	f083 0301 	eor.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <_ZN3ASK4recvEPhS0_+0x28>
	return false;
 8000800:	2300      	movs	r3, #0
 8000802:	e021      	b.n	8000848 <_ZN3ASK4recvEPhS0_+0x6c>

    if (buf && len)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d019      	beq.n	800083e <_ZN3ASK4recvEPhS0_+0x62>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d016      	beq.n	800083e <_ZN3ASK4recvEPhS0_+0x62>
    {
	// Skip the length and 4 headers that are at the beginning of the rxBuf
	// and drop the trailing 2 bytes of FCS
	uint8_t message_len = _rxBufLen-ASK_HEADER_LEN - 3;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000816:	b2db      	uxtb	r3, r3
 8000818:	3b07      	subs	r3, #7
 800081a:	75fb      	strb	r3, [r7, #23]
	if (*len > message_len)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	7dfa      	ldrb	r2, [r7, #23]
 8000822:	429a      	cmp	r2, r3
 8000824:	d202      	bcs.n	800082c <_ZN3ASK4recvEPhS0_+0x50>
	    *len = message_len;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7dfa      	ldrb	r2, [r7, #23]
 800082a:	701a      	strb	r2, [r3, #0]
	memcpy(buf, _rxBuf+ASK_HEADER_LEN+1, *len);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3331      	adds	r3, #49	; 0x31
 8000830:	1d59      	adds	r1, r3, #5
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	68b8      	ldr	r0, [r7, #8]
 800083a:	f006 f933 	bl	8006aa4 <memcpy>
    }
    _rxBufValid = false; // Got the most recent message, delete it
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
//    printBuffer("recv:", buf, *len);
    return true;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <_ZN3ASK4sendEPKhh>:

// Caution: this may block
bool ASK::send(const uint8_t* data, uint8_t len)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	4613      	mov	r3, r2
 800085c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint16_t index = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	83bb      	strh	r3, [r7, #28]
    uint16_t crc = 0xffff;
 8000862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000866:	837b      	strh	r3, [r7, #26]
    uint8_t *p = _txBuf + ASK_PREAMBLE_LEN; // start of the message area
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3379      	adds	r3, #121	; 0x79
 800086c:	3308      	adds	r3, #8
 800086e:	617b      	str	r3, [r7, #20]
    uint8_t count = len + 3 + ASK_HEADER_LEN; // Added byte count and FCS and headers to get total number of bytes
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	3307      	adds	r3, #7
 8000874:	74fb      	strb	r3, [r7, #19]

    if (len > ASK_MAX_MESSAGE_LEN)
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b3c      	cmp	r3, #60	; 0x3c
 800087a:	d901      	bls.n	8000880 <_ZN3ASK4sendEPKhh+0x30>
	return false;
 800087c:	2300      	movs	r3, #0
 800087e:	e13d      	b.n	8000afc <_ZN3ASK4sendEPKhh+0x2ac>

    // Wait for transmitter to become available
    waitPacketSent();
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3320      	adds	r3, #32
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4610      	mov	r0, r2
 800088c:	4798      	blx	r3

    if (!waitCAD())
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	332c      	adds	r3, #44	; 0x2c
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4610      	mov	r0, r2
 800089a:	4798      	blx	r3
 800089c:	4603      	mov	r3, r0
 800089e:	f083 0301 	eor.w	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <_ZN3ASK4sendEPKhh+0x5c>
	return false;  // Check channel activity
 80008a8:	2300      	movs	r3, #0
 80008aa:	e127      	b.n	8000afc <_ZN3ASK4sendEPKhh+0x2ac>

    // Encode the message length
    crc = crc_ccitt_update(crc, count);
 80008ac:	7cfa      	ldrb	r2, [r7, #19]
 80008ae:	8b7b      	ldrh	r3, [r7, #26]
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fbd3 	bl	800105e <_Z16crc_ccitt_updateth>
 80008b8:	4603      	mov	r3, r0
 80008ba:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[count >> 4];
 80008bc:	7cfb      	ldrb	r3, [r7, #19]
 80008be:	091b      	lsrs	r3, r3, #4
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	8bbb      	ldrh	r3, [r7, #28]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	83ba      	strh	r2, [r7, #28]
 80008ca:	461a      	mov	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a8c      	ldr	r2, [pc, #560]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 80008d2:	5c52      	ldrb	r2, [r2, r1]
 80008d4:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[count & 0xf];
 80008d6:	7cfb      	ldrb	r3, [r7, #19]
 80008d8:	f003 020f 	and.w	r2, r3, #15
 80008dc:	8bbb      	ldrh	r3, [r7, #28]
 80008de:	1c59      	adds	r1, r3, #1
 80008e0:	83b9      	strh	r1, [r7, #28]
 80008e2:	4619      	mov	r1, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	440b      	add	r3, r1
 80008e8:	4986      	ldr	r1, [pc, #536]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 80008ea:	5c8a      	ldrb	r2, [r1, r2]
 80008ec:	701a      	strb	r2, [r3, #0]

    // Encode the headers
    crc = crc_ccitt_update(crc, _txHeaderTo);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	7ada      	ldrb	r2, [r3, #11]
 80008f2:	8b7b      	ldrh	r3, [r7, #26]
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fbb1 	bl	800105e <_Z16crc_ccitt_updateth>
 80008fc:	4603      	mov	r3, r0
 80008fe:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderTo >> 4];
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	7adb      	ldrb	r3, [r3, #11]
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4619      	mov	r1, r3
 800090a:	8bbb      	ldrh	r3, [r7, #28]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	83ba      	strh	r2, [r7, #28]
 8000910:	461a      	mov	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	4413      	add	r3, r2
 8000916:	4a7b      	ldr	r2, [pc, #492]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000918:	5c52      	ldrb	r2, [r2, r1]
 800091a:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderTo & 0xf];
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	7adb      	ldrb	r3, [r3, #11]
 8000920:	f003 020f 	and.w	r2, r3, #15
 8000924:	8bbb      	ldrh	r3, [r7, #28]
 8000926:	1c59      	adds	r1, r3, #1
 8000928:	83b9      	strh	r1, [r7, #28]
 800092a:	4619      	mov	r1, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	440b      	add	r3, r1
 8000930:	4974      	ldr	r1, [pc, #464]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000932:	5c8a      	ldrb	r2, [r1, r2]
 8000934:	701a      	strb	r2, [r3, #0]
    crc = crc_ccitt_update(crc, _txHeaderFrom);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	7b1a      	ldrb	r2, [r3, #12]
 800093a:	8b7b      	ldrh	r3, [r7, #26]
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fb8d 	bl	800105e <_Z16crc_ccitt_updateth>
 8000944:	4603      	mov	r3, r0
 8000946:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderFrom >> 4];
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	7b1b      	ldrb	r3, [r3, #12]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	8bbb      	ldrh	r3, [r7, #28]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	83ba      	strh	r2, [r7, #28]
 8000958:	461a      	mov	r2, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	4a69      	ldr	r2, [pc, #420]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000960:	5c52      	ldrb	r2, [r2, r1]
 8000962:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderFrom & 0xf];
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	7b1b      	ldrb	r3, [r3, #12]
 8000968:	f003 020f 	and.w	r2, r3, #15
 800096c:	8bbb      	ldrh	r3, [r7, #28]
 800096e:	1c59      	adds	r1, r3, #1
 8000970:	83b9      	strh	r1, [r7, #28]
 8000972:	4619      	mov	r1, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	440b      	add	r3, r1
 8000978:	4962      	ldr	r1, [pc, #392]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 800097a:	5c8a      	ldrb	r2, [r1, r2]
 800097c:	701a      	strb	r2, [r3, #0]
    crc = crc_ccitt_update(crc, _txHeaderId);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	7b5a      	ldrb	r2, [r3, #13]
 8000982:	8b7b      	ldrh	r3, [r7, #26]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fb69 	bl	800105e <_Z16crc_ccitt_updateth>
 800098c:	4603      	mov	r3, r0
 800098e:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderId >> 4];
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	7b5b      	ldrb	r3, [r3, #13]
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4619      	mov	r1, r3
 800099a:	8bbb      	ldrh	r3, [r7, #28]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	83ba      	strh	r2, [r7, #28]
 80009a0:	461a      	mov	r2, r3
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a57      	ldr	r2, [pc, #348]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 80009a8:	5c52      	ldrb	r2, [r2, r1]
 80009aa:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderId & 0xf];
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7b5b      	ldrb	r3, [r3, #13]
 80009b0:	f003 020f 	and.w	r2, r3, #15
 80009b4:	8bbb      	ldrh	r3, [r7, #28]
 80009b6:	1c59      	adds	r1, r3, #1
 80009b8:	83b9      	strh	r1, [r7, #28]
 80009ba:	4619      	mov	r1, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	440b      	add	r3, r1
 80009c0:	4950      	ldr	r1, [pc, #320]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 80009c2:	5c8a      	ldrb	r2, [r1, r2]
 80009c4:	701a      	strb	r2, [r3, #0]
    crc = crc_ccitt_update(crc, _txHeaderFlags);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	7b9a      	ldrb	r2, [r3, #14]
 80009ca:	8b7b      	ldrh	r3, [r7, #26]
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fb45 	bl	800105e <_Z16crc_ccitt_updateth>
 80009d4:	4603      	mov	r3, r0
 80009d6:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderFlags >> 4];
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	7b9b      	ldrb	r3, [r3, #14]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	8bbb      	ldrh	r3, [r7, #28]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	83ba      	strh	r2, [r7, #28]
 80009e8:	461a      	mov	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a45      	ldr	r2, [pc, #276]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 80009f0:	5c52      	ldrb	r2, [r2, r1]
 80009f2:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderFlags & 0xf];
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	7b9b      	ldrb	r3, [r3, #14]
 80009f8:	f003 020f 	and.w	r2, r3, #15
 80009fc:	8bbb      	ldrh	r3, [r7, #28]
 80009fe:	1c59      	adds	r1, r3, #1
 8000a00:	83b9      	strh	r1, [r7, #28]
 8000a02:	4619      	mov	r1, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	440b      	add	r3, r1
 8000a08:	493e      	ldr	r1, [pc, #248]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a0a:	5c8a      	ldrb	r2, [r1, r2]
 8000a0c:	701a      	strb	r2, [r3, #0]

    // Encode the message into 6 bit symbols. Each byte is converted into
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	77fb      	strb	r3, [r7, #31]
 8000a12:	7ffa      	ldrb	r2, [r7, #31]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d22d      	bcs.n	8000a76 <_ZN3ASK4sendEPKhh+0x226>
    {
	crc = crc_ccitt_update(crc, data[i]);
 8000a1a:	7ffb      	ldrb	r3, [r7, #31]
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	8b7b      	ldrh	r3, [r7, #26]
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fb19 	bl	800105e <_Z16crc_ccitt_updateth>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	837b      	strh	r3, [r7, #26]
	p[index++] = symbols[data[i] >> 4];
 8000a30:	7ffb      	ldrb	r3, [r7, #31]
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	8bbb      	ldrh	r3, [r7, #28]
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	83ba      	strh	r2, [r7, #28]
 8000a44:	461a      	mov	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a4c:	5c52      	ldrb	r2, [r2, r1]
 8000a4e:	701a      	strb	r2, [r3, #0]
	p[index++] = symbols[data[i] & 0xf];
 8000a50:	7ffb      	ldrb	r3, [r7, #31]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	f003 020f 	and.w	r2, r3, #15
 8000a5c:	8bbb      	ldrh	r3, [r7, #28]
 8000a5e:	1c59      	adds	r1, r3, #1
 8000a60:	83b9      	strh	r1, [r7, #28]
 8000a62:	4619      	mov	r1, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	440b      	add	r3, r1
 8000a68:	4926      	ldr	r1, [pc, #152]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a6a:	5c8a      	ldrb	r2, [r1, r2]
 8000a6c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++)
 8000a6e:	7ffb      	ldrb	r3, [r7, #31]
 8000a70:	3301      	adds	r3, #1
 8000a72:	77fb      	strb	r3, [r7, #31]
 8000a74:	e7cd      	b.n	8000a12 <_ZN3ASK4sendEPKhh+0x1c2>
    }

    // Append the fcs, 16 bits before encoding (4 6-bit symbols after encoding)
    // Caution: VW expects the _ones_complement_ of the CCITT CRC-16 as the FCS
    // VW sends FCS as low byte then hi byte
    crc = ~crc;
 8000a76:	8b7b      	ldrh	r3, [r7, #26]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[(crc >> 4)  & 0xf];
 8000a7c:	8b7b      	ldrh	r3, [r7, #26]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f003 020f 	and.w	r2, r3, #15
 8000a86:	8bbb      	ldrh	r3, [r7, #28]
 8000a88:	1c59      	adds	r1, r3, #1
 8000a8a:	83b9      	strh	r1, [r7, #28]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	440b      	add	r3, r1
 8000a92:	491c      	ldr	r1, [pc, #112]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a94:	5c8a      	ldrb	r2, [r1, r2]
 8000a96:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[crc & 0xf];
 8000a98:	8b7b      	ldrh	r3, [r7, #26]
 8000a9a:	f003 020f 	and.w	r2, r3, #15
 8000a9e:	8bbb      	ldrh	r3, [r7, #28]
 8000aa0:	1c59      	adds	r1, r3, #1
 8000aa2:	83b9      	strh	r1, [r7, #28]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	440b      	add	r3, r1
 8000aaa:	4916      	ldr	r1, [pc, #88]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000aac:	5c8a      	ldrb	r2, [r1, r2]
 8000aae:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 12) & 0xf];
 8000ab0:	8b7b      	ldrh	r3, [r7, #26]
 8000ab2:	0b1b      	lsrs	r3, r3, #12
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	8bbb      	ldrh	r3, [r7, #28]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	83ba      	strh	r2, [r7, #28]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000ac6:	5c52      	ldrb	r2, [r2, r1]
 8000ac8:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 8)  & 0xf];
 8000aca:	8b7b      	ldrh	r3, [r7, #26]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	f003 020f 	and.w	r2, r3, #15
 8000ad4:	8bbb      	ldrh	r3, [r7, #28]
 8000ad6:	1c59      	adds	r1, r3, #1
 8000ad8:	83b9      	strh	r1, [r7, #28]
 8000ada:	4619      	mov	r1, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	440b      	add	r3, r1
 8000ae0:	4908      	ldr	r1, [pc, #32]	; (8000b04 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000ae2:	5c8a      	ldrb	r2, [r1, r2]
 8000ae4:	701a      	strb	r2, [r3, #0]

    // Total number of 6-bit symbols to send
    _txBufLen = index + ASK_PREAMBLE_LEN;
 8000ae6:	8bbb      	ldrh	r3, [r7, #28]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	3308      	adds	r3, #8
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

    // Start the low level interrupt handler sending symbols
    setModeTx();
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff fdfb 	bl	80006f0 <_ZN3ASK9setModeTxEv>

    return true;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000

08000b08 <_ZN3ASK6readRxEv>:

// Read the RX data input pin, taking into account platform type and inversion.
bool INTERRUPT_ATTR ASK::readRx()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    bool value;
    value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f001 ff3f 	bl	8002998 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]
    return value ^ _rxInverted;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b2c:	7bfa      	ldrb	r2, [r7, #15]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	bf14      	ite	ne
 8000b32:	2301      	movne	r3, #1
 8000b34:	2300      	moveq	r3, #0
 8000b36:	b2db      	uxtb	r3, r3
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZN3ASK7writeTxEb>:

// Write the TX output pin, taking into account platform type.
void INTERRUPT_ATTR ASK::writeTx(bool value)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
    if (value == true) {
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d106      	bne.n	8000b60 <_ZN3ASK7writeTxEb+0x20>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f001 ff35 	bl	80029c8 <HAL_GPIO_WritePin>
    }
    else {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
    }
}
 8000b5e:	e005      	b.n	8000b6c <_ZN3ASK7writeTxEb+0x2c>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f001 ff2e 	bl	80029c8 <HAL_GPIO_WritePin>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN3ASK16maxMessageLengthEv>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
	}
}

uint8_t ASK::maxMessageLength()
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    return ASK_MAX_MESSAGE_LEN;
 8000b7c:	233c      	movs	r3, #60	; 0x3c
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <_ZN3ASK11symbol_6to4Eh>:

// Convert a 6 bit encoded symbol into its 4 bit decoded equivalent
uint8_t INTERRUPT_ATTR ASK::symbol_6to4(uint8_t symbol)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
    // Linear search :-( Could have a 64 byte reverse lookup table?
    // There is a little speedup here courtesy Ralph Doncaster:
    // The shortcut works because bit 5 of the symbol is 1 for the last 8
    // symbols, and it is 0 for the first 8.
    // So we only have to search half the table
    for (i = (symbol>>2) & 8, count=8; count-- ; i++)
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	73bb      	strb	r3, [r7, #14]
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	1e5a      	subs	r2, r3, #1
 8000bac:	73ba      	strb	r2, [r7, #14]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00b      	beq.n	8000bd4 <_ZN3ASK11symbol_6to4Eh+0x48>
	if (symbol == symbols[i]) return i;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <_ZN3ASK11symbol_6to4Eh+0x58>)
 8000bc0:	5cd3      	ldrb	r3, [r2, r3]
 8000bc2:	78fa      	ldrb	r2, [r7, #3]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d101      	bne.n	8000bcc <_ZN3ASK11symbol_6to4Eh+0x40>
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	e004      	b.n	8000bd6 <_ZN3ASK11symbol_6to4Eh+0x4a>
    for (i = (symbol>>2) & 8, count=8; count-- ; i++)
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e7e9      	b.n	8000ba8 <_ZN3ASK11symbol_6to4Eh+0x1c>

    return 0; // Not found
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000000 	.word	0x20000000

08000be8 <_ZN3ASK13validateRxBufEv>:

// Check whether the latest received message is complete and uncorrupted
// We should always check the FCS at user level, not interrupt level
// since it is slow
void ASK::validateRxBuf()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xffff;
 8000bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf4:	81fb      	strh	r3, [r7, #14]
    // The CRC covers the byte count, headers and user data
    for (uint8_t i = 0; i < _rxBufLen; i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	737b      	strb	r3, [r7, #13]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	7b7a      	ldrb	r2, [r7, #13]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	bf34      	ite	cc
 8000c08:	2301      	movcc	r3, #1
 8000c0a:	2300      	movcs	r3, #0
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00f      	beq.n	8000c32 <_ZN3ASK13validateRxBufEv+0x4a>
	crc = crc_ccitt_update(crc, _rxBuf[i]);
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa1c 	bl	800105e <_Z16crc_ccitt_updateth>
 8000c26:	4603      	mov	r3, r0
 8000c28:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < _rxBufLen; i++)
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	737b      	strb	r3, [r7, #13]
 8000c30:	e7e3      	b.n	8000bfa <_ZN3ASK13validateRxBufEv+0x12>
    if (crc != 0xf0b8) // CRC when buffer and expected CRC are CRC'd
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00b      	beq.n	8000c54 <_ZN3ASK13validateRxBufEv+0x6c>
    {
	// Reject and drop the message
	_rxBad++;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	8a5b      	ldrh	r3, [r3, #18]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	825a      	strh	r2, [r3, #18]
	_rxBufValid = false;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return;
 8000c52:	e033      	b.n	8000cbc <_ZN3ASK13validateRxBufEv+0xd4>
    }

    // Extract the 4 headers that follow the message length
    _rxHeaderTo    = _rxBuf[1];
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	71da      	strb	r2, [r3, #7]
    _rxHeaderFrom  = _rxBuf[2];
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	721a      	strb	r2, [r3, #8]
    _rxHeaderId    = _rxBuf[3];
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	725a      	strb	r2, [r3, #9]
    _rxHeaderFlags = _rxBuf[4];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	729a      	strb	r2, [r3, #10]
    if (_promiscuous ||
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	799b      	ldrb	r3, [r3, #6]
	_rxHeaderTo == _thisAddress ||
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10b      	bne.n	8000c9c <_ZN3ASK13validateRxBufEv+0xb4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	79db      	ldrb	r3, [r3, #7]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	795b      	ldrb	r3, [r3, #5]
    if (_promiscuous ||
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d004      	beq.n	8000c9c <_ZN3ASK13validateRxBufEv+0xb4>
	_rxHeaderTo == BROADCAST_ADDRESS)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	79db      	ldrb	r3, [r3, #7]
 8000c96:	b2db      	uxtb	r3, r3
	_rxHeaderTo == _thisAddress ||
 8000c98:	2bff      	cmp	r3, #255	; 0xff
 8000c9a:	d101      	bne.n	8000ca0 <_ZN3ASK13validateRxBufEv+0xb8>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <_ZN3ASK13validateRxBufEv+0xba>
 8000ca0:	2300      	movs	r3, #0
    if (_promiscuous ||
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00a      	beq.n	8000cbc <_ZN3ASK13validateRxBufEv+0xd4>
    {
	_rxGood++;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	8a9b      	ldrh	r3, [r3, #20]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	3301      	adds	r3, #1
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	829a      	strh	r2, [r3, #20]
	_rxBufValid = true;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
}
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_ZN3ASK12receiveTimerEv>:


void INTERRUPT_ATTR ASK::receiveTimer()
{
 8000cc2:	b590      	push	{r4, r7, lr}
 8000cc4:	b085      	sub	sp, #20
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
    bool rxSample = readRx();
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff1c 	bl	8000b08 <_ZN3ASK6readRxEv>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]

    // Integrate each sample
    if (rxSample)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d008      	beq.n	8000cec <_ZN3ASK12receiveTimerEv+0x2a>
	_rxIntegrator++;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    if (rxSample != _rxLastSample)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	bf14      	ite	ne
 8000cfa:	2301      	movne	r3, #1
 8000cfc:	2300      	moveq	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d017      	beq.n	8000d34 <_ZN3ASK12receiveTimerEv+0x72>
    {
	// Transition, advance if ramp > 80, retard if < 80
	_rxPllRamp += ((_rxPllRamp < ASK_RAMP_TRANSITION)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d0a:	b2db      	uxtb	r3, r3
			   ? ASK_RAMP_INC_RETARD
 8000d0c:	2b4f      	cmp	r3, #79	; 0x4f
 8000d0e:	d801      	bhi.n	8000d14 <_ZN3ASK12receiveTimerEv+0x52>
 8000d10:	210b      	movs	r1, #11
 8000d12:	e000      	b.n	8000d16 <_ZN3ASK12receiveTimerEv+0x54>
 8000d14:	211d      	movs	r1, #29
	_rxPllRamp += ((_rxPllRamp < ASK_RAMP_TRANSITION)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	b2cb      	uxtb	r3, r1
 8000d20:	4413      	add	r3, r2
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			   : ASK_RAMP_INC_ADVANCE);
	_rxLastSample = rxSample;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000d32:	e008      	b.n	8000d46 <_ZN3ASK12receiveTimerEv+0x84>
    }
    else
    {
	// No transition
	// Advance ramp by standard 20 (== 160/8 samples)
	_rxPllRamp += ASK_RAMP_INC;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	3314      	adds	r3, #20
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
    if (_rxPllRamp >= ASK_RX_RAMP_LEN)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b9f      	cmp	r3, #159	; 0x9f
 8000d50:	bf8c      	ite	hi
 8000d52:	2301      	movhi	r3, #1
 8000d54:	2300      	movls	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80d4 	beq.w	8000f06 <_ZN3ASK12receiveTimerEv+0x244>
    {
	// Add this to the 12th bit of _rxBits, LSB first
	// The last 12 bits are kept
	_rxBits >>= 1;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	085b      	lsrs	r3, r3, #1
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

	// Check the integrator to see how many samples in this cycle were high.
	// If < 5 out of 8, then its declared a 0 bit, else a 1;
	if (_rxIntegrator >= 5)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	bf8c      	ite	hi
 8000d78:	2301      	movhi	r3, #1
 8000d7a:	2300      	movls	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <_ZN3ASK12receiveTimerEv+0xd0>
	    _rxBits |= 0x800;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	85da      	strh	r2, [r3, #46]	; 0x2e

	_rxPllRamp -= ASK_RX_RAMP_LEN;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	3360      	adds	r3, #96	; 0x60
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	_rxIntegrator = 0; // Clear the integral for the next cycle
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	if (_rxActive)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bf14      	ite	ne
 8000db8:	2301      	movne	r3, #1
 8000dba:	2300      	moveq	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 8089 	beq.w	8000ed6 <_ZN3ASK12receiveTimerEv+0x214>
	{
	    // We have the start symbol and now we are collecting message bits,
	    // 6 per symbol, each which has to be decoded to 4 bits
	    if (++_rxBitCount >= 12)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8000dd8:	2b0b      	cmp	r3, #11
 8000dda:	bf8c      	ite	hi
 8000ddc:	2301      	movhi	r3, #1
 8000dde:	2300      	movls	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 808f 	beq.w	8000f06 <_ZN3ASK12receiveTimerEv+0x244>
	    {
		// Have 12 bits of encoded message == 1 byte encoded
		// Decode as 2 lots of 6 bits into 2 lots of 4 bits
		// The 6 lsbits are the high nybble
		uint8_t this_byte =
		    (symbol_6to4(_rxBits & 0x3f)) << 4
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fec7 	bl	8000b8c <_ZN3ASK11symbol_6to4Eh>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	011b      	lsls	r3, r3, #4
		    | symbol_6to4(_rxBits >> 6);
 8000e02:	b25c      	sxtb	r4, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	099b      	lsrs	r3, r3, #6
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff feba 	bl	8000b8c <_ZN3ASK11symbol_6to4Eh>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	73bb      	strb	r3, [r7, #14]

		// The first decoded byte is the byte count of the following message
		// the count includes the byte count and the 2 trailing FCS bytes
		// REVISIT: may also include the ACK flag at 0x40
		if (_rxBufLen == 0)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf0c      	ite	eq
 8000e2e:	2301      	moveq	r3, #1
 8000e30:	2300      	movne	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d020      	beq.n	8000e7a <_ZN3ASK12receiveTimerEv+0x1b8>
		{
		    // The first byte is the byte count
		    // Check it for sensibility. It cant be less than 7, since it
		    // includes the byte count itself, the 4 byte header and the 2 byte FCS
		    _rxCount = this_byte;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7bba      	ldrb	r2, [r7, #14]
 8000e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		    if (_rxCount < 7 || _rxCount > ASK_MAX_PAYLOAD_LEN)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d905      	bls.n	8000e58 <_ZN3ASK12receiveTimerEv+0x196>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b43      	cmp	r3, #67	; 0x43
 8000e56:	d901      	bls.n	8000e5c <_ZN3ASK12receiveTimerEv+0x19a>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <_ZN3ASK12receiveTimerEv+0x19c>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <_ZN3ASK12receiveTimerEv+0x1b8>
		    {
			// Stupid message length, drop the whole thing
			_rxActive = false;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_rxBad++;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	8a5b      	ldrh	r3, [r3, #18]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	825a      	strh	r2, [r3, #18]
                        return;
 8000e78:	e045      	b.n	8000f06 <_ZN3ASK12receiveTimerEv+0x244>
		    }
		}
		_rxBuf[_rxBufLen++] = this_byte;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	b2d1      	uxtb	r1, r2
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	7bba      	ldrb	r2, [r7, #14]
 8000e94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		if (_rxBufLen >= _rxCount)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	bf2c      	ite	cs
 8000eac:	2301      	movcs	r3, #1
 8000eae:	2300      	movcc	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00a      	beq.n	8000ecc <_ZN3ASK12receiveTimerEv+0x20a>
		{
		    // Got all the bytes now
		    _rxActive = false;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		    _rxBufFull = true;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		    setModeIdle();
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fbee 	bl	80006a8 <_ZN3ASK11setModeIdleEv>
		}
		_rxBitCount = 0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000ed4:	e017      	b.n	8000f06 <_ZN3ASK12receiveTimerEv+0x244>
	    }
	}
	// Not in a message, see if we have a start symbol
	else if (_rxBits == ASK_START_SYMBOL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	f640 3238 	movw	r2, #2872	; 0xb38
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	bf0c      	ite	eq
 8000ee4:	2301      	moveq	r3, #1
 8000ee6:	2300      	movne	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <_ZN3ASK12receiveTimerEv+0x244>
	{
	    // Have start symbol, start collecting message
	    _rxActive = true;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	    _rxBitCount = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    _rxBufLen = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	}
    }
}
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}

08000f0c <_ZN3ASK13transmitTimerEv>:

void INTERRUPT_ATTR ASK::transmitTimer()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    if (_txSample++ == 0)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	b2d1      	uxtb	r1, r2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf0c      	ite	eq
 8000f28:	2301      	moveq	r3, #1
 8000f2a:	2300      	movne	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d041      	beq.n	8000fb6 <_ZN3ASK13transmitTimerEv+0xaa>
    {
	// Send next bit
	// Symbols are sent LSB first
	// Finished sending the whole message? (after waiting one bit period
	// since the last bit)
	if (_txIndex >= _txBufLen)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d30a      	bcc.n	8000f58 <_ZN3ASK13transmitTimerEv+0x4c>
	{
	    setModeIdle();
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fbb0 	bl	80006a8 <_ZN3ASK11setModeIdleEv>
	    _txGood++;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	8adb      	ldrh	r3, [r3, #22]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	82da      	strh	r2, [r3, #22]
 8000f56:	e02e      	b.n	8000fb6 <_ZN3ASK13transmitTimerEv+0xaa>
	}
	else
	{
	    writeTx(_txBuf[_txIndex] & (1 << _txBit++));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000f68:	4619      	mov	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	b2d0      	uxtb	r0, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	f882 0077 	strb.w	r0, [r2, #119]	; 0x77
 8000f7a:	fa41 f303 	asr.w	r3, r1, r3
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fdd6 	bl	8000b40 <_ZN3ASK7writeTxEb>
	    if (_txBit >= 6)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d90b      	bls.n	8000fb6 <_ZN3ASK13transmitTimerEv+0xaa>
	    {
		_txBit = 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		_txIndex++;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	    }
	}
    }

    if (_txSample > 7)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	d903      	bls.n	8000fc8 <_ZN3ASK13transmitTimerEv+0xbc>
	_txSample = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN3ASK20handleTimerInterruptEv>:

void ASK::handleTimerInterrupt() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if (_mode == ModeRx)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <_ZN3ASK20handleTimerInterruptEv+0x24>
		receiveTimer();
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fe68 	bl	8000cc2 <_ZN3ASK12receiveTimerEv>
	else if (_mode == ModeTx)
		transmitTimer();
}
 8000ff2:	e00c      	b.n	800100e <_ZN3ASK20handleTimerInterruptEv+0x3e>
	else if (_mode == ModeTx)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	bf0c      	ite	eq
 8000ffe:	2301      	moveq	r3, #1
 8001000:	2300      	movne	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <_ZN3ASK20handleTimerInterruptEv+0x3e>
		transmitTimer();
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff7f 	bl	8000f0c <_ZN3ASK13transmitTimerEv>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <_ZN3ASKD1Ev>:
/// Internal ramp adjustment parameter
#define ASK_RAMP_INC_ADVANCE (ASK_RAMP_INC+ASK_RAMP_ADJUST)

#define ASK_PREAMBLE_LEN 8

class ASK : public GenericDriver
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_ZN3ASKD1Ev+0x20>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fabb 	bl	80005a4 <_ZN13GenericDriverD1Ev>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	08007b74 	.word	0x08007b74

0800103c <_ZN3ASKD0Ev>:
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ffe7 	bl	8001018 <_ZN3ASKD1Ev>
 800104a:	f44f 7184 	mov.w	r1, #264	; 0x108
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f005 fcce 	bl	80069f0 <_ZdlPvj>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_Z16crc_ccitt_updateth>:

    return crc;
}

uint16_t crc_ccitt_update (uint16_t crc, uint8_t data)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	460a      	mov	r2, r1
 8001068:	80fb      	strh	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	717b      	strb	r3, [r7, #5]
    data ^= lo8 (crc);
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	b25a      	sxtb	r2, r3
 8001072:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001076:	4053      	eors	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	717b      	strb	r3, [r7, #5]
    data ^= data << 4;
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	b25a      	sxtb	r2, r3
 8001082:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001086:	4053      	eors	r3, r2
 8001088:	b25b      	sxtb	r3, r3
 800108a:	717b      	strb	r3, [r7, #5]

    return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4)
 800108c:	797b      	ldrb	r3, [r7, #5]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21a      	sxth	r2, r3
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4053      	eors	r3, r2
 80010a8:	b21a      	sxth	r2, r3
	    ^ ((uint16_t)data << 3));
 80010aa:	797b      	ldrb	r3, [r7, #5]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4053      	eors	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	b29b      	uxth	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_ZN13GenericDriverC1Ev>:

#include "stm32l4xx_hal.h"
#include "GenericDriver.h"
#include <stdlib.h>

GenericDriver::GenericDriver()
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    _txHeaderId(0),
    _txHeaderFlags(0),
    _rxBad(0),
    _rxGood(0),
    _txGood(0),
    _cad_timeout(0)
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <_ZN13GenericDriverC1Ev+0x58>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	711a      	strb	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	715a      	strb	r2, [r3, #5]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	72da      	strb	r2, [r3, #11]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	731a      	strb	r2, [r3, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	735a      	strb	r2, [r3, #13]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	739a      	strb	r2, [r3, #14]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	825a      	strh	r2, [r3, #18]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	829a      	strh	r2, [r3, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	82da      	strh	r2, [r3, #22]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
{
}
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	08007bf4 	.word	0x08007bf4

08001120 <_ZN13GenericDriver4initEv>:

bool GenericDriver::init()
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    return true;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_ZN13GenericDriver13waitAvailableEt>:

// Blocks until a valid message is received
void GenericDriver::waitAvailable(uint16_t polldelay)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	807b      	strh	r3, [r7, #2]
    while (!available())
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	330c      	adds	r3, #12
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
 800114e:	4603      	mov	r3, r0
 8001150:	f083 0301 	eor.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <_ZN13GenericDriver13waitAvailableEt+0x34>
      {
	YIELD;
	if (polldelay)
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <_ZN13GenericDriver13waitAvailableEt+0xc>
		HAL_Delay(polldelay);
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f950 	bl	8002408 <HAL_Delay>
    while (!available())
 8001168:	e7eb      	b.n	8001142 <_ZN13GenericDriver13waitAvailableEt+0xc>
      }
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZN13GenericDriver20waitAvailableTimeoutEtt>:

// Blocks until a valid message is received or timeout expires
// Return true if there is a message available
// Works correctly even on millis() rollover
bool GenericDriver::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]
 800117e:	4613      	mov	r3, r2
 8001180:	803b      	strh	r3, [r7, #0]
    unsigned long starttime = HAL_GetTick();
 8001182:	f001 f935 	bl	80023f0 <HAL_GetTick>
 8001186:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - starttime) < timeout)
 8001188:	f001 f932 	bl	80023f0 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad2      	subs	r2, r2, r3
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	429a      	cmp	r2, r3
 8001196:	bf34      	ite	cc
 8001198:	2301      	movcc	r3, #1
 800119a:	2300      	movcs	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d012      	beq.n	80011c8 <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x56>
    {
        if (available())
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	330c      	adds	r3, #12
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x46>
	{
           return true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e008      	b.n	80011ca <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x58>
	}
	YIELD;
	if (polldelay)
 80011b8:	883b      	ldrh	r3, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0e4      	beq.n	8001188 <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x16>
		HAL_Delay(polldelay);
 80011be:	883b      	ldrh	r3, [r7, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 f921 	bl	8002408 <HAL_Delay>
    while ((HAL_GetTick() - starttime) < timeout)
 80011c6:	e7df      	b.n	8001188 <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x16>
    }
    return false;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_ZN13GenericDriver14waitPacketSentEv>:

bool GenericDriver::waitPacketSent()
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
    while (_mode == ModeTx)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	791b      	ldrb	r3, [r3, #4]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d000      	beq.n	80011f0 <_ZN13GenericDriver14waitPacketSentEv+0x1e>
 80011ee:	e7f4      	b.n	80011da <_ZN13GenericDriver14waitPacketSentEv+0x8>
	YIELD; // Wait for any previous transmit to finish
    return true;
 80011f0:	2301      	movs	r3, #1
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <_ZN13GenericDriver14waitPacketSentEt>:

bool GenericDriver::waitPacketSent(uint16_t timeout)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	807b      	strh	r3, [r7, #2]
    unsigned long starttime = HAL_GetTick();
 800120a:	f001 f8f1 	bl	80023f0 <HAL_GetTick>
 800120e:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - starttime) < timeout)
 8001210:	f001 f8ee 	bl	80023f0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad2      	subs	r2, r2, r3
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	429a      	cmp	r2, r3
 800121e:	bf34      	ite	cc
 8001220:	2301      	movcc	r3, #1
 8001222:	2300      	movcs	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <_ZN13GenericDriver14waitPacketSentEt+0x44>
    {
        if (_mode != ModeTx) // Any previous transmit finished?
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	791b      	ldrb	r3, [r3, #4]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b03      	cmp	r3, #3
 8001232:	bf14      	ite	ne
 8001234:	2301      	movne	r3, #1
 8001236:	2300      	moveq	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0e8      	beq.n	8001210 <_ZN13GenericDriver14waitPacketSentEt+0x12>
           return true;
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <_ZN13GenericDriver14waitPacketSentEt+0x46>
	YIELD;
    }
    return false;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN13GenericDriver7waitCADEv>:

// Wait until no channel activity detected or timeout
bool GenericDriver::waitCAD()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    if (!_cad_timeout)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <_ZN13GenericDriver7waitCADEv+0x14>
	return true;
 800125c:	2301      	movs	r3, #1
 800125e:	e032      	b.n	80012c6 <_ZN13GenericDriver7waitCADEv+0x7a>
    // Wait for any channel activity to finish or timeout
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout
    unsigned long t = HAL_GetTick();
 8001260:	f001 f8c6 	bl	80023f0 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]
    while (isChannelActive())
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3330      	adds	r3, #48	; 0x30
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d025      	beq.n	80012c4 <_ZN13GenericDriver7waitCADEv+0x78>
    {
         if (HAL_GetTick() - t > _cad_timeout)
 8001278:	f001 f8ba 	bl	80023f0 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad2      	subs	r2, r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	429a      	cmp	r2, r3
 8001288:	bf8c      	ite	hi
 800128a:	2301      	movhi	r3, #1
 800128c:	2300      	movls	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <_ZN13GenericDriver7waitCADEv+0x4c>
	     return false;
 8001294:	2300      	movs	r3, #0
 8001296:	e016      	b.n	80012c6 <_ZN13GenericDriver7waitCADEv+0x7a>
         HAL_Delay((rand() % 10 + 1) * 100);
 8001298:	f005 fcfa 	bl	8006c90 <rand>
 800129c:	4601      	mov	r1, r0
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <_ZN13GenericDriver7waitCADEv+0x84>)
 80012a0:	fb83 2301 	smull	r2, r3, r3, r1
 80012a4:	109a      	asrs	r2, r3, #2
 80012a6:	17cb      	asrs	r3, r1, #31
 80012a8:	1ad2      	subs	r2, r2, r3
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	1aca      	subs	r2, r1, r3
 80012b4:	1c53      	adds	r3, r2, #1
 80012b6:	2264      	movs	r2, #100	; 0x64
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 f8a3 	bl	8002408 <HAL_Delay>
    while (isChannelActive())
 80012c2:	e7d0      	b.n	8001266 <_ZN13GenericDriver7waitCADEv+0x1a>
    }

    return true;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	66666667 	.word	0x66666667

080012d4 <_ZN13GenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool GenericDriver::isChannelActive()
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    return false;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_ZN13GenericDriver14setPromiscuousEb>:

void GenericDriver::setPromiscuous(bool promiscuous)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70fb      	strb	r3, [r7, #3]
    _promiscuous = promiscuous;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	78fa      	ldrb	r2, [r7, #3]
 80012fa:	719a      	strb	r2, [r3, #6]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_ZN13GenericDriver14setThisAddressEh>:

void GenericDriver::setThisAddress(uint8_t address)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
    _thisAddress = address;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	715a      	strb	r2, [r3, #5]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_ZN13GenericDriver11setHeaderToEh>:

void GenericDriver::setHeaderTo(uint8_t to)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	70fb      	strb	r3, [r7, #3]
    _txHeaderTo = to;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	78fa      	ldrb	r2, [r7, #3]
 8001336:	72da      	strb	r2, [r3, #11]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_ZN13GenericDriver13setHeaderFromEh>:

void GenericDriver::setHeaderFrom(uint8_t from)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
    _txHeaderFrom = from;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	731a      	strb	r2, [r3, #12]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_ZN13GenericDriver11setHeaderIdEh>:

void GenericDriver::setHeaderId(uint8_t id)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	70fb      	strb	r3, [r7, #3]
    _txHeaderId = id;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	735a      	strb	r2, [r3, #13]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_ZN13GenericDriver14setHeaderFlagsEhh>:

void GenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
 800138c:	4613      	mov	r3, r2
 800138e:	70bb      	strb	r3, [r7, #2]
    _txHeaderFlags &= ~clear;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7b9b      	ldrb	r3, [r3, #14]
 8001394:	b25a      	sxtb	r2, r3
 8001396:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800139a:	43db      	mvns	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4013      	ands	r3, r2
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	739a      	strb	r2, [r3, #14]
    _txHeaderFlags |= set;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7b9a      	ldrb	r2, [r3, #14]
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	739a      	strb	r2, [r3, #14]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_ZN13GenericDriver8headerToEv>:

uint8_t GenericDriver::headerTo()
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
    return _rxHeaderTo;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	79db      	ldrb	r3, [r3, #7]
 80013ce:	b2db      	uxtb	r3, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN13GenericDriver10headerFromEv>:

uint8_t GenericDriver::headerFrom()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    return _rxHeaderFrom;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7a1b      	ldrb	r3, [r3, #8]
 80013e8:	b2db      	uxtb	r3, r3
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_ZN13GenericDriver8headerIdEv>:

uint8_t GenericDriver::headerId()
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
    return _rxHeaderId;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7a5b      	ldrb	r3, [r3, #9]
 8001402:	b2db      	uxtb	r3, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_ZN13GenericDriver11headerFlagsEv>:

uint8_t GenericDriver::headerFlags()
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    return _rxHeaderFlags;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7a9b      	ldrb	r3, [r3, #10]
 800141c:	b2db      	uxtb	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_ZN13GenericDriver8lastRssiEv>:

int16_t GenericDriver::lastRssi()
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
    return _lastRssi;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a1b      	ldrh	r3, [r3, #16]
 8001436:	b21b      	sxth	r3, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_ZN13GenericDriver4modeEv>:

GenericDriver::Mode  GenericDriver::mode()
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    return _mode;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	791b      	ldrb	r3, [r3, #4]
 8001450:	b2db      	uxtb	r3, r3
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_ZN13GenericDriver7setModeENS_4ModeE>:

void  GenericDriver::setMode(Mode mode)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	70fb      	strb	r3, [r7, #3]
    _mode = mode;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	78fa      	ldrb	r2, [r7, #3]
 800146e:	711a      	strb	r2, [r3, #4]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_ZN13GenericDriver5sleepEv>:

bool  GenericDriver::sleep()
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    return false;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_ZN13GenericDriver5rxBadEv>:
//    Serial.println("");
//#endif
}

uint16_t GenericDriver::rxBad()
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
    return _rxBad;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8a5b      	ldrh	r3, [r3, #18]
 800149e:	b29b      	uxth	r3, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_ZN13GenericDriver6rxGoodEv>:

uint16_t GenericDriver::rxGood()
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    return _rxGood;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	8a9b      	ldrh	r3, [r3, #20]
 80014b8:	b29b      	uxth	r3, r3
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_ZN13GenericDriver6txGoodEv>:

uint16_t GenericDriver::txGood()
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
    return _txGood;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8adb      	ldrh	r3, [r3, #22]
 80014d2:	b29b      	uxth	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN3ASK5speedEv>:
    /// Starts the transmitter in the RF69.
    void           setModeTx();

    /// Returns the current speed in bits per second
    /// \return The current speed in bits per second
    uint16_t        speed() { return _speed;}
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	8c1b      	ldrh	r3, [r3, #32]
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b08d      	sub	sp, #52	; 0x34
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int32_t CH1_DC = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t errMsg[] = "Fail init";
 8001502:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <main+0xb8>)
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	ca07      	ldmia	r2, {r0, r1, r2}
 800150a:	c303      	stmia	r3!, {r0, r1}
 800150c:	801a      	strh	r2, [r3, #0]
	uint8_t passMsg[] = "Successful init";
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <main+0xbc>)
 8001510:	f107 0410 	add.w	r4, r7, #16
 8001514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t msgRX[16] = "Fuck you pussy?";
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <main+0xc0>)
 800151c:	463c      	mov	r4, r7
 800151e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001524:	f000 fefb 	bl	800231e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001528:	f000 f84e 	bl	80015c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152c:	f000 faa4 	bl	8001a78 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8001530:	f000 f90a 	bl	8001748 <_ZL20MX_LPUART1_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001534:	f000 fa6e 	bl	8001a14 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_I2C1_Init();
 8001538:	f000 f8b8 	bl	80016ac <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 800153c:	f000 f936 	bl	80017ac <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8001540:	f000 f9c4 	bl	80018cc <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  while (!driver.init()) {
 8001544:	481d      	ldr	r0, [pc, #116]	; (80015bc <main+0xc4>)
 8001546:	f7ff f891 	bl	800066c <_ZN3ASK4initEv>
 800154a:	4603      	mov	r3, r0
 800154c:	f083 0301 	eor.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00e      	beq.n	8001574 <main+0x7c>
	  HAL_UART_Transmit(&hlpuart1, errMsg, strlen((char*) errMsg), 2000);
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fe48 	bl	80001f0 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	f107 0120 	add.w	r1, r7, #32
 8001568:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800156c:	4814      	ldr	r0, [pc, #80]	; (80015c0 <main+0xc8>)
 800156e:	f004 fa8f 	bl	8005a90 <HAL_UART_Transmit>
  while (!driver.init()) {
 8001572:	e7e7      	b.n	8001544 <main+0x4c>
  }
  HAL_UART_Transmit(&hlpuart1, passMsg, strlen((char*) passMsg), 2000);
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fe39 	bl	80001f0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	f107 0110 	add.w	r1, r7, #16
 8001586:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <main+0xc8>)
 800158c:	f004 fa80 	bl	8005a90 <HAL_UART_Transmit>
  TIM5_IRQHandler();
 8001590:	f000 fdb6 	bl	8002100 <TIM5_IRQHandler>
  HAL_TIM_Base_Start_IT(&htim5);
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <main+0xcc>)
 8001596:	f003 f8a1 	bl	80046dc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver.send(msgRX, sizeof(msgRX));
 800159a:	463b      	mov	r3, r7
 800159c:	2210      	movs	r2, #16
 800159e:	4619      	mov	r1, r3
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <main+0xc4>)
 80015a2:	f7ff f955 	bl	8000850 <_ZN3ASK4sendEPKhh>
	  HAL_Delay(1000);
 80015a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015aa:	f000 ff2d 	bl	8002408 <HAL_Delay>
	  driver.send(msgRX, sizeof(msgRX));
 80015ae:	e7f4      	b.n	800159a <main+0xa2>
 80015b0:	08007b40 	.word	0x08007b40
 80015b4:	08007b4c 	.word	0x08007b4c
 80015b8:	08007b5c 	.word	0x08007b5c
 80015bc:	20000720 	.word	0x20000720
 80015c0:	200000f8 	.word	0x200000f8
 80015c4:	200001c8 	.word	0x200001c8

080015c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b096      	sub	sp, #88	; 0x58
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2244      	movs	r2, #68	; 0x44
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 fa72 	bl	8006ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ee:	f001 fc8f 	bl	8002f10 <HAL_PWREx_ControlVoltageScaling>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001602:	f000 fb29 	bl	8001c58 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001606:	f001 fc65 	bl	8002ed4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <_Z18SystemClock_Configv+0xe0>)
 800160c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <_Z18SystemClock_Configv+0xe0>)
 8001612:	f023 0318 	bic.w	r3, r3, #24
 8001616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800161a:	2314      	movs	r3, #20
 800161c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800161e:	2301      	movs	r3, #1
 8001620:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001622:	2301      	movs	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001632:	2301      	movs	r3, #1
 8001634:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800163a:	2328      	movs	r3, #40	; 0x28
 800163c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001646:	2302      	movs	r3, #2
 8001648:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fcd4 	bl	8002ffc <HAL_RCC_OscConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8001664:	f000 faf8 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	230f      	movs	r3, #15
 800166a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2303      	movs	r3, #3
 800166e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001678:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800167c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	2104      	movs	r1, #4
 8001682:	4618      	mov	r0, r3
 8001684:	f002 f8d4 	bl	8003830 <HAL_RCC_ClockConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001698:	f000 fade 	bl	8001c58 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800169c:	f002 fde8 	bl	8004270 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016a0:	bf00      	nop
 80016a2:	3758      	adds	r7, #88	; 0x58
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <_ZL12MX_I2C1_Initv+0x94>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80016b6:	4b21      	ldr	r3, [pc, #132]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <_ZL12MX_I2C1_Initv+0x98>)
 80016ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e6:	4815      	ldr	r0, [pc, #84]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 80016e8:	f001 f986 	bl	80029f8 <HAL_I2C_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80016fc:	f000 faac 	bl	8001c58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001700:	2100      	movs	r1, #0
 8001702:	480e      	ldr	r0, [pc, #56]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 8001704:	f001 fa07 	bl	8002b16 <HAL_I2CEx_ConfigAnalogFilter>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf14      	ite	ne
 800170e:	2301      	movne	r3, #1
 8001710:	2300      	moveq	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001718:	f000 fa9e 	bl	8001c58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800171c:	2100      	movs	r1, #0
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <_ZL12MX_I2C1_Initv+0x90>)
 8001720:	f001 fa44 	bl	8002bac <HAL_I2CEx_ConfigDigitalFilter>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001734:	f000 fa90 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000a4 	.word	0x200000a4
 8001740:	40005400 	.word	0x40005400
 8001744:	10909cec 	.word	0x10909cec

08001748 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800174e:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <_ZL20MX_LPUART1_UART_Initv+0x60>)
 8001750:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001784:	4807      	ldr	r0, [pc, #28]	; (80017a4 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001786:	f004 f935 	bl	80059f4 <HAL_UART_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_ZL20MX_LPUART1_UART_Initv+0x56>
  {
    Error_Handler();
 800179a:	f000 fa5d 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200000f8 	.word	0x200000f8
 80017a8:	40008000 	.word	0x40008000

080017ac <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	615a      	str	r2, [r3, #20]
 80017dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80017e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800;
 80017e6:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80017e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80017ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80017f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001808:	482f      	ldr	r0, [pc, #188]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 800180a:	f002 ff0f 	bl	800462c <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <_ZL12MX_TIM2_Initv+0x76>
  {
    Error_Handler();
 800181e:	f000 fa1b 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182c:	4619      	mov	r1, r3
 800182e:	4826      	ldr	r0, [pc, #152]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001830:	f003 fb34 	bl	8004e9c <HAL_TIM_ConfigClockSource>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <_ZL12MX_TIM2_Initv+0x9c>
  {
    Error_Handler();
 8001844:	f000 fa08 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001848:	481f      	ldr	r0, [pc, #124]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 800184a:	f003 f818 	bl	800487e <HAL_TIM_PWM_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 800185e:	f000 f9fb 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	4815      	ldr	r0, [pc, #84]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001872:	f004 f819 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 8001886:	f000 f9e7 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188a:	2360      	movs	r3, #96	; 0x60
 800188c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	4619      	mov	r1, r3
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80018a2:	f003 f9e7 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf14      	ite	ne
 80018ac:	2301      	movne	r3, #1
 80018ae:	2300      	moveq	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80018b6:	f000 f9cf 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80018bc:	f000 fb26 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 80018c0:	bf00      	nop
 80018c2:	3738      	adds	r7, #56	; 0x38
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000017c 	.word	0x2000017c

080018cc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b091      	sub	sp, #68	; 0x44
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 8001900:	4a42      	ldr	r2, [pc, #264]	; (8001a0c <_ZL12MX_TIM5_Initv+0x140>)
 8001902:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001910:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 8001912:	f04f 32ff 	mov.w	r2, #4294967295
 8001916:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001924:	4838      	ldr	r0, [pc, #224]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 8001926:	f002 fe81 	bl	800462c <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800193a:	f000 f98d 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	482f      	ldr	r0, [pc, #188]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 800194c:	f003 faa6 	bl	8004e9c <HAL_TIM_ConfigClockSource>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8001960:	f000 f97a 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001964:	4828      	ldr	r0, [pc, #160]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 8001966:	f002 ff29 	bl	80047bc <HAL_TIM_OC_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800197a:	f000 f96d 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	4619      	mov	r1, r3
 800198c:	481e      	ldr	r0, [pc, #120]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 800198e:	f003 ff8b 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 80019a2:	f000 f959 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 80019be:	f003 f8df 	bl	8004b80 <HAL_TIM_OC_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 80019d2:	f000 f941 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  uint16_t us=(HAL_RCC_GetHCLKFreq()/8)/driver.speed();
 80019d6:	f002 f8b7 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 80019da:	4603      	mov	r3, r0
 80019dc:	08dc      	lsrs	r4, r3, #3
 80019de:	480c      	ldr	r0, [pc, #48]	; (8001a10 <_ZL12MX_TIM5_Initv+0x144>)
 80019e0:	f7ff fd7e 	bl	80014e0 <_ZN3ASK5speedEv>
 80019e4:	4603      	mov	r3, r0
 80019e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80019ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
  htim5.Instance->CCR1 = us;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
  htim5.Instance->ARR = us - 1;
 80019f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019f6:	1e5a      	subs	r2, r3, #1
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <_ZL12MX_TIM5_Initv+0x13c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE END TIM5_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	3744      	adds	r7, #68	; 0x44
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200001c8 	.word	0x200001c8
 8001a0c:	40000c00 	.word	0x40000c00
 8001a10:	20000720 	.word	0x20000720

08001a14 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a22:	2206      	movs	r2, #6
 8001a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a2e:	2202      	movs	r2, #2
 8001a30:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a58:	f001 f8f4 	bl	8002c44 <HAL_PCD_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8001a6c:	f000 f8f4 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000214 	.word	0x20000214

08001a78 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a6c      	ldr	r2, [pc, #432]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa6:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a66      	ldr	r2, [pc, #408]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b61      	ldr	r3, [pc, #388]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a60      	ldr	r2, [pc, #384]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b5e      	ldr	r3, [pc, #376]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad6:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a5a      	ldr	r2, [pc, #360]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a54      	ldr	r2, [pc, #336]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b12:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001b36:	f001 fa51 	bl	8002fdc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2140      	movs	r1, #64	; 0x40
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f000 ff41 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b4c:	483e      	ldr	r0, [pc, #248]	; (8001c48 <_ZL12MX_GPIO_Initv+0x1d0>)
 8001b4e:	f000 ff3b 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001b58:	483c      	ldr	r0, [pc, #240]	; (8001c4c <_ZL12MX_GPIO_Initv+0x1d4>)
 8001b5a:	f000 ff35 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_ptt_GPIO_Port, _ptt_Pin, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b64:	483a      	ldr	r0, [pc, #232]	; (8001c50 <_ZL12MX_GPIO_Initv+0x1d8>)
 8001b66:	f000 ff2f 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2140      	movs	r1, #64	; 0x40
 8001b6e:	4839      	ldr	r0, [pc, #228]	; (8001c54 <_ZL12MX_GPIO_Initv+0x1dc>)
 8001b70:	f000 ff2a 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b74:	2340      	movs	r3, #64	; 0x40
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8e:	f000 fd71 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : _rx_Pin */
  GPIO_InitStruct.Pin = _rx_Pin;
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(_rx_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba8:	f000 fd64 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001bac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4820      	ldr	r0, [pc, #128]	; (8001c48 <_ZL12MX_GPIO_Initv+0x1d0>)
 8001bc6:	f000 fd55 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001bca:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	481a      	ldr	r0, [pc, #104]	; (8001c4c <_ZL12MX_GPIO_Initv+0x1d4>)
 8001be4:	f000 fd46 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : _ptt_Pin */
  GPIO_InitStruct.Pin = _ptt_Pin;
 8001be8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(_ptt_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4813      	ldr	r0, [pc, #76]	; (8001c50 <_ZL12MX_GPIO_Initv+0x1d8>)
 8001c02:	f000 fd37 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c06:	2320      	movs	r3, #32
 8001c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	480e      	ldr	r0, [pc, #56]	; (8001c54 <_ZL12MX_GPIO_Initv+0x1dc>)
 8001c1a:	f000 fd2b 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c1e:	2340      	movs	r3, #64	; 0x40
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c22:	2301      	movs	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <_ZL12MX_GPIO_Initv+0x1dc>)
 8001c36:	f000 fd1d 	bl	8002674 <HAL_GPIO_Init>

}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48001400 	.word	0x48001400
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000c00 	.word	0x48000c00
 8001c54:	48001800 	.word	0x48001800

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <Error_Handler+0x8>
	...

08001c64 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10f      	bne.n	8001c94 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10a      	bne.n	8001c94 <_Z41__static_initialization_and_destruction_0ii+0x30>
ASK driver;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	230a      	movs	r3, #10
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	230c      	movs	r3, #12
 8001c88:	220b      	movs	r2, #11
 8001c8a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001c8e:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001c90:	f7fe fca8 	bl	80005e4 <_ZN3ASKC1Ethhhb>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d107      	bne.n	8001caa <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d102      	bne.n	8001caa <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001ca6:	f7ff f9b7 	bl	8001018 <_ZN3ASKD1Ev>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000720 	.word	0x20000720

08001cb8 <_GLOBAL__sub_I_hi2c1>:
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff ffcf 	bl	8001c64 <_Z41__static_initialization_and_destruction_0ii>
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_GLOBAL__sub_D_hi2c1>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff ffc7 	bl	8001c64 <_Z41__static_initialization_and_destruction_0ii>
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_MspInit+0x44>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_MspInit+0x44>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_MspInit+0x44>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_MspInit+0x44>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <HAL_MspInit+0x44>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_MspInit+0x44>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0ac      	sub	sp, #176	; 0xb0
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	228c      	movs	r2, #140	; 0x8c
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 febd 	bl	8006ac0 <memset>
  if(hi2c->Instance==I2C1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <HAL_I2C_MspInit+0xb0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d13b      	bne.n	8001dc8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 ff8b 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d68:	f7ff ff76 	bl	8001c58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_I2C_MspInit+0xb4>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_I2C_MspInit+0xb4>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_I2C_MspInit+0xb4>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8c:	2312      	movs	r3, #18
 8001d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001da8:	4619      	mov	r1, r3
 8001daa:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <HAL_I2C_MspInit+0xb8>)
 8001dac:	f000 fc62 	bl	8002674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_I2C_MspInit+0xb4>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_I2C_MspInit+0xb4>)
 8001db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dba:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_I2C_MspInit+0xb4>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	37b0      	adds	r7, #176	; 0xb0
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000400 	.word	0x48000400

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0ac      	sub	sp, #176	; 0xb0
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	228c      	movs	r2, #140	; 0x8c
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fe5f 	bl	8006ac0 <memset>
  if(huart->Instance==LPUART1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d13d      	bne.n	8001e88 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f001 ff2d 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e24:	f7ff ff18 	bl	8001c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001e58:	f001 f8c0 	bl	8002fdc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e76:	2308      	movs	r3, #8
 8001e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e80:	4619      	mov	r1, r3
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_UART_MspInit+0xbc>)
 8001e84:	f000 fbf6 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001e88:	bf00      	nop
 8001e8a:	37b0      	adds	r7, #176	; 0xb0
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40008000 	.word	0x40008000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48001800 	.word	0x48001800

08001e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d10c      	bne.n	8001ec8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ec6:	e018      	b.n	8001efa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_TIM_Base_MspInit+0x6c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d113      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2032      	movs	r0, #50	; 0x32
 8001ef0:	f000 fb89 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ef4:	2032      	movs	r0, #50	; 0x32
 8001ef6:	f000 fba2 	bl	800263e <HAL_NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40000c00 	.word	0x40000c00

08001f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d11c      	bne.n	8001f68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_TIM_MspPostInit+0x64>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_TIM_MspPostInit+0x64>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_TIM_MspPostInit+0x64>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f46:	2301      	movs	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f64:	f000 fb86 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000

08001f74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0ae      	sub	sp, #184	; 0xb8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	228c      	movs	r2, #140	; 0x8c
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fd93 	bl	8006ac0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa2:	d17c      	bne.n	800209e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001faa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001fba:	2318      	movs	r3, #24
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001fca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 fe4f 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001fe0:	f7ff fe3a 	bl	8001c58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ffc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002016:	230a      	movs	r3, #10
 8002018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002020:	4619      	mov	r1, r3
 8002022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002026:	f000 fb25 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800202a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002042:	4619      	mov	r1, r3
 8002044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002048:	f000 fb14 	bl	8002674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002050:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 8002052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d114      	bne.n	800209a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002088:	f000 ff98 	bl	8002fbc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <HAL_PCD_MspInit+0x134>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002098:	e001      	b.n	800209e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800209a:	f000 ff8f 	bl	8002fbc <HAL_PWREx_EnableVddUSB>
}
 800209e:	bf00      	nop
 80020a0:	37b8      	adds	r7, #184	; 0xb8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <NMI_Handler+0x4>

080020b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <HardFault_Handler+0x4>

080020b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <MemManage_Handler+0x4>

080020be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <BusFault_Handler+0x4>

080020c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <UsageFault_Handler+0x4>

080020ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f8:	f000 f966 	bl	80023c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	driver.handleTimerInterrupt();
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <TIM5_IRQHandler+0x14>)
 8002106:	f7fe ff63 	bl	8000fd0 <_ZN3ASK20handleTimerInterruptEv>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <TIM5_IRQHandler+0x18>)
 800210c:	f002 fc18 	bl	8004940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000720 	.word	0x20000720
 8002118:	200001c8 	.word	0x200001c8

0800211c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
	return 1;
 8002120:	2301      	movs	r3, #1
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_kill>:

int _kill(int pid, int sig)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002136:	f004 fc7b 	bl	8006a30 <__errno>
 800213a:	4603      	mov	r3, r0
 800213c:	2216      	movs	r2, #22
 800213e:	601a      	str	r2, [r3, #0]
	return -1;
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_exit>:

void _exit (int status)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ffe7 	bl	800212c <_kill>
	while (1) {}		/* Make sure we hang here */
 800215e:	e7fe      	b.n	800215e <_exit+0x12>

08002160 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e00a      	b.n	8002188 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002172:	f3af 8000 	nop.w
 8002176:	4601      	mov	r1, r0
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60ba      	str	r2, [r7, #8]
 800217e:	b2ca      	uxtb	r2, r1
 8002180:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbf0      	blt.n	8002172 <_read+0x12>
	}

return len;
 8002190:	687b      	ldr	r3, [r7, #4]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e009      	b.n	80021c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	60ba      	str	r2, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf1      	blt.n	80021ac <_write+0x12>
	}
	return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_close>:

int _close(int file)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	return -1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fa:	605a      	str	r2, [r3, #4]
	return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_isatty>:

int _isatty(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
	return 1;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
	return 0;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <_sbrk+0x5c>)
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <_sbrk+0x60>)
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <_sbrk+0x64>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <_sbrk+0x68>)
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d207      	bcs.n	800227c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800226c:	f004 fbe0 	bl	8006a30 <__errno>
 8002270:	4603      	mov	r3, r0
 8002272:	220c      	movs	r2, #12
 8002274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	e009      	b.n	8002290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <_sbrk+0x64>)
 800228c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20050000 	.word	0x20050000
 800229c:	00000400 	.word	0x00000400
 80022a0:	20000828 	.word	0x20000828
 80022a4:	20000840 	.word	0x20000840

080022a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <SystemInit+0x20>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <SystemInit+0x20>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002304 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d0:	f7ff ffea 	bl	80022a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d4:	480c      	ldr	r0, [pc, #48]	; (8002308 <LoopForever+0x6>)
  ldr r1, =_edata
 80022d6:	490d      	ldr	r1, [pc, #52]	; (800230c <LoopForever+0xa>)
  ldr r2, =_sidata
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <LoopForever+0xe>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022ec:	4c0a      	ldr	r4, [pc, #40]	; (8002318 <LoopForever+0x16>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fa:	f004 fb9f 	bl	8006a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022fe:	f7ff f8fb 	bl	80014f8 <main>

08002302 <LoopForever>:

LoopForever:
    b LoopForever
 8002302:	e7fe      	b.n	8002302 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002304:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002310:	08007e14 	.word	0x08007e14
  ldr r2, =_sbss
 8002314:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002318:	20000840 	.word	0x20000840

0800231c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC1_2_IRQHandler>

0800231e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f961 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800232e:	2000      	movs	r0, #0
 8002330:	f000 f80e 	bl	8002350 <HAL_InitTick>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	71fb      	strb	r3, [r7, #7]
 800233e:	e001      	b.n	8002344 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002340:	f7ff fcca 	bl	8001cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002344:	79fb      	ldrb	r3, [r7, #7]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_InitTick+0x6c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_InitTick+0x70>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_InitTick+0x6c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f96d 	bl	800265a <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d809      	bhi.n	80023a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f000 f937 	bl	8002606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_InitTick+0x74>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e007      	b.n	80023b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e004      	b.n	80023b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e001      	b.n	80023b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000018 	.word	0x20000018
 80023c0:	20000010 	.word	0x20000010
 80023c4:	20000014 	.word	0x20000014

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000018 	.word	0x20000018
 80023ec:	2000082c 	.word	0x2000082c

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000082c 	.word	0x2000082c

08002408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d005      	beq.n	800242e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_Delay+0x44>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800242e:	bf00      	nop
 8002430:	f7ff ffde 	bl	80023f0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8f7      	bhi.n	8002430 <HAL_Delay+0x28>
  {
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000018 	.word	0x20000018

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db0b      	blt.n	80024de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4907      	ldr	r1, [pc, #28]	; (80024ec <__NVIC_EnableIRQ+0x38>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2001      	movs	r0, #1
 80024d6:	fa00 f202 	lsl.w	r2, r0, r2
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	; (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025bc:	d301      	bcc.n	80025c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <SysTick_Config+0x40>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ca:	210f      	movs	r1, #15
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f7ff ff8e 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <SysTick_Config+0x40>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <SysTick_Config+0x40>)
 80025dc:	2207      	movs	r2, #7
 80025de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff29 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002618:	f7ff ff3e 	bl	8002498 <__NVIC_GetPriorityGrouping>
 800261c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff ff8e 	bl	8002544 <NVIC_EncodePriority>
 8002628:	4602      	mov	r2, r0
 800262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff5d 	bl	80024f0 <__NVIC_SetPriority>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff31 	bl	80024b4 <__NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffa2 	bl	80025ac <SysTick_Config>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002682:	e166      	b.n	8002952 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8158 	beq.w	800294c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d005      	beq.n	80026b4 <HAL_GPIO_Init+0x40>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d130      	bne.n	8002716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ea:	2201      	movs	r2, #1
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 0201 	and.w	r2, r3, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b03      	cmp	r3, #3
 8002720:	d017      	beq.n	8002752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d123      	bne.n	80027a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3208      	adds	r2, #8
 8002766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	6939      	ldr	r1, [r7, #16]
 80027a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0203 	and.w	r2, r3, #3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80b2 	beq.w	800294c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e8:	4b61      	ldr	r3, [pc, #388]	; (8002970 <HAL_GPIO_Init+0x2fc>)
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	4a60      	ldr	r2, [pc, #384]	; (8002970 <HAL_GPIO_Init+0x2fc>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6613      	str	r3, [r2, #96]	; 0x60
 80027f4:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <HAL_GPIO_Init+0x2fc>)
 80027f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002800:	4a5c      	ldr	r2, [pc, #368]	; (8002974 <HAL_GPIO_Init+0x300>)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	220f      	movs	r2, #15
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800282a:	d02b      	beq.n	8002884 <HAL_GPIO_Init+0x210>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_GPIO_Init+0x304>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d025      	beq.n	8002880 <HAL_GPIO_Init+0x20c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a51      	ldr	r2, [pc, #324]	; (800297c <HAL_GPIO_Init+0x308>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01f      	beq.n	800287c <HAL_GPIO_Init+0x208>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a50      	ldr	r2, [pc, #320]	; (8002980 <HAL_GPIO_Init+0x30c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d019      	beq.n	8002878 <HAL_GPIO_Init+0x204>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_GPIO_Init+0x310>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_GPIO_Init+0x200>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a4e      	ldr	r2, [pc, #312]	; (8002988 <HAL_GPIO_Init+0x314>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00d      	beq.n	8002870 <HAL_GPIO_Init+0x1fc>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a4d      	ldr	r2, [pc, #308]	; (800298c <HAL_GPIO_Init+0x318>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <HAL_GPIO_Init+0x1f8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <HAL_GPIO_Init+0x31c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_GPIO_Init+0x1f4>
 8002864:	2307      	movs	r3, #7
 8002866:	e00e      	b.n	8002886 <HAL_GPIO_Init+0x212>
 8002868:	2308      	movs	r3, #8
 800286a:	e00c      	b.n	8002886 <HAL_GPIO_Init+0x212>
 800286c:	2306      	movs	r3, #6
 800286e:	e00a      	b.n	8002886 <HAL_GPIO_Init+0x212>
 8002870:	2305      	movs	r3, #5
 8002872:	e008      	b.n	8002886 <HAL_GPIO_Init+0x212>
 8002874:	2304      	movs	r3, #4
 8002876:	e006      	b.n	8002886 <HAL_GPIO_Init+0x212>
 8002878:	2303      	movs	r3, #3
 800287a:	e004      	b.n	8002886 <HAL_GPIO_Init+0x212>
 800287c:	2302      	movs	r3, #2
 800287e:	e002      	b.n	8002886 <HAL_GPIO_Init+0x212>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_GPIO_Init+0x212>
 8002884:	2300      	movs	r3, #0
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	f002 0203 	and.w	r2, r2, #3
 800288c:	0092      	lsls	r2, r2, #2
 800288e:	4093      	lsls	r3, r2
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002896:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_GPIO_Init+0x300>)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a4:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_GPIO_Init+0x320>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c8:	4a32      	ldr	r2, [pc, #200]	; (8002994 <HAL_GPIO_Init+0x320>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_GPIO_Init+0x320>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028f2:	4a28      	ldr	r2, [pc, #160]	; (8002994 <HAL_GPIO_Init+0x320>)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028f8:	4b26      	ldr	r3, [pc, #152]	; (8002994 <HAL_GPIO_Init+0x320>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_GPIO_Init+0x320>)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_GPIO_Init+0x320>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <HAL_GPIO_Init+0x320>)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f ae91 	bne.w	8002684 <HAL_GPIO_Init+0x10>
  }
}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	48000c00 	.word	0x48000c00
 8002984:	48001000 	.word	0x48001000
 8002988:	48001400 	.word	0x48001400
 800298c:	48001800 	.word	0x48001800
 8002990:	48001c00 	.word	0x48001c00
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	887b      	ldrh	r3, [r7, #2]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	e001      	b.n	80029ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029e4:	e002      	b.n	80029ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e081      	b.n	8002b0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff f97e 	bl	8001d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	; 0x24
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	e006      	b.n	8002a80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d104      	bne.n	8002a92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69d9      	ldr	r1, [r3, #28]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d138      	bne.n	8002b9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e032      	b.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2224      	movs	r2, #36	; 0x24
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d139      	bne.n	8002c36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e033      	b.n	8002c38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
  }
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c46:	b08f      	sub	sp, #60	; 0x3c
 8002c48:	af0a      	add	r7, sp, #40	; 0x28
 8002c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e116      	b.n	8002e84 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff f97f 	bl	8001f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 fc22 	bl	80064de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	687e      	ldr	r6, [r7, #4]
 8002ca2:	466d      	mov	r5, sp
 8002ca4:	f106 0410 	add.w	r4, r6, #16
 8002ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cb8:	1d33      	adds	r3, r6, #4
 8002cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cbc:	6838      	ldr	r0, [r7, #0]
 8002cbe:	f003 fbe2 	bl	8006486 <USB_CoreInit>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0d7      	b.n	8002e84 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fc10 	bl	8006500 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e04a      	b.n	8002d7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	333d      	adds	r3, #61	; 0x3d
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	333c      	adds	r3, #60	; 0x3c
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	b298      	uxth	r0, r3
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3344      	adds	r3, #68	; 0x44
 8002d22:	4602      	mov	r2, r0
 8002d24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3340      	adds	r3, #64	; 0x40
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3348      	adds	r3, #72	; 0x48
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	334c      	adds	r3, #76	; 0x4c
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3354      	adds	r3, #84	; 0x54
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3af      	bcc.n	8002ce6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	e044      	b.n	8002e16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dfa:	7bfa      	ldrb	r2, [r7, #15]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	3301      	adds	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3b5      	bcc.n	8002d8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	687e      	ldr	r6, [r7, #4]
 8002e28:	466d      	mov	r5, sp
 8002e2a:	f106 0410 	add.w	r4, r6, #16
 8002e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3e:	1d33      	adds	r3, r6, #4
 8002e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e42:	6838      	ldr	r0, [r7, #0]
 8002e44:	f003 fba8 	bl	8006598 <USB_DevInit>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2202      	movs	r2, #2
 8002e52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e014      	b.n	8002e84 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f80a 	bl	8002e8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fd54 	bl	800692a <USB_DevDisconnect>

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	f043 0303 	orr.w	r3, r3, #3
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40007000 	.word	0x40007000

08002ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40007000 	.word	0x40007000

08002f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1e:	d130      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d038      	beq.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2232      	movs	r2, #50	; 0x32
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9b      	lsrs	r3, r3, #18
 8002f50:	3301      	adds	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f54:	e002      	b.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d102      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f2      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7c:	d110      	bne.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00f      	b.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d007      	beq.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f98:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	20000010 	.word	0x20000010
 8002fb8:	431bde83 	.word	0x431bde83

08002fbc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fca:	6053      	str	r3, [r2, #4]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40007000 	.word	0x40007000

08002fdc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fea:	6053      	str	r3, [r2, #4]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40007000 	.word	0x40007000

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f000 bc08 	b.w	8003820 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003010:	4b96      	ldr	r3, [pc, #600]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800301a:	4b94      	ldr	r3, [pc, #592]	; (800326c <HAL_RCC_OscConfig+0x270>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80e4 	beq.w	80031fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_RCC_OscConfig+0x4c>
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2b0c      	cmp	r3, #12
 800303c:	f040 808b 	bne.w	8003156 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b01      	cmp	r3, #1
 8003044:	f040 8087 	bne.w	8003156 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003048:	4b88      	ldr	r3, [pc, #544]	; (800326c <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_OscConfig+0x64>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e3df      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	4b81      	ldr	r3, [pc, #516]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d004      	beq.n	800307a <HAL_RCC_OscConfig+0x7e>
 8003070:	4b7e      	ldr	r3, [pc, #504]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003078:	e005      	b.n	8003086 <HAL_RCC_OscConfig+0x8a>
 800307a:	4b7c      	ldr	r3, [pc, #496]	; (800326c <HAL_RCC_OscConfig+0x270>)
 800307c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003086:	4293      	cmp	r3, r2
 8003088:	d223      	bcs.n	80030d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fd92 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e3c0      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309e:	4b73      	ldr	r3, [pc, #460]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a72      	ldr	r2, [pc, #456]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b70      	ldr	r3, [pc, #448]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	496d      	ldr	r1, [pc, #436]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030bc:	4b6b      	ldr	r3, [pc, #428]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	4968      	ldr	r1, [pc, #416]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
 80030d0:	e025      	b.n	800311e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	4b66      	ldr	r3, [pc, #408]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a65      	ldr	r2, [pc, #404]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4960      	ldr	r1, [pc, #384]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f0:	4b5e      	ldr	r3, [pc, #376]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	495b      	ldr	r1, [pc, #364]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fd52 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e380      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800311e:	f000 fc87 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8003122:	4602      	mov	r2, r0
 8003124:	4b51      	ldr	r3, [pc, #324]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4950      	ldr	r1, [pc, #320]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003130:	5ccb      	ldrb	r3, [r1, r3]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a4e      	ldr	r2, [pc, #312]	; (8003274 <HAL_RCC_OscConfig+0x278>)
 800313c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800313e:	4b4e      	ldr	r3, [pc, #312]	; (8003278 <HAL_RCC_OscConfig+0x27c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff f904 	bl	8002350 <HAL_InitTick>
 8003148:	4603      	mov	r3, r0
 800314a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d052      	beq.n	80031f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	e364      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d032      	beq.n	80031c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a42      	ldr	r2, [pc, #264]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800316a:	f7ff f941 	bl	80023f0 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003172:	f7ff f93d 	bl	80023f0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e34d      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003184:	4b39      	ldr	r3, [pc, #228]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a35      	ldr	r2, [pc, #212]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003196:	f043 0308 	orr.w	r3, r3, #8
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4930      	ldr	r1, [pc, #192]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ae:	4b2f      	ldr	r3, [pc, #188]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	492b      	ldr	r1, [pc, #172]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
 80031c2:	e01a      	b.n	80031fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a28      	ldr	r2, [pc, #160]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031d0:	f7ff f90e 	bl	80023f0 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d8:	f7ff f90a 	bl	80023f0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e31a      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1dc>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d073      	beq.n	80032ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d005      	beq.n	8003218 <HAL_RCC_OscConfig+0x21c>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d10e      	bne.n	8003230 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d10b      	bne.n	8003230 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_RCC_OscConfig+0x270>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d063      	beq.n	80032ec <HAL_RCC_OscConfig+0x2f0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d15f      	bne.n	80032ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e2f7      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x24c>
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_RCC_OscConfig+0x270>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e025      	b.n	8003294 <HAL_RCC_OscConfig+0x298>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003250:	d114      	bne.n	800327c <HAL_RCC_OscConfig+0x280>
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a02      	ldr	r2, [pc, #8]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e013      	b.n	8003294 <HAL_RCC_OscConfig+0x298>
 800326c:	40021000 	.word	0x40021000
 8003270:	08007c6c 	.word	0x08007c6c
 8003274:	20000010 	.word	0x20000010
 8003278:	20000014 	.word	0x20000014
 800327c:	4ba0      	ldr	r3, [pc, #640]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a9f      	ldr	r2, [pc, #636]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b9d      	ldr	r3, [pc, #628]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a9c      	ldr	r2, [pc, #624]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7ff f8a8 	bl	80023f0 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7ff f8a4 	bl	80023f0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e2b4      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	4b92      	ldr	r3, [pc, #584]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x2a8>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7ff f894 	bl	80023f0 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7ff f890 	bl	80023f0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e2a0      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032de:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x2d0>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d060      	beq.n	80033bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d005      	beq.n	800330c <HAL_RCC_OscConfig+0x310>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d119      	bne.n	800333a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d116      	bne.n	800333a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800330c:	4b7c      	ldr	r3, [pc, #496]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_OscConfig+0x328>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e27d      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	4973      	ldr	r1, [pc, #460]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003338:	e040      	b.n	80033bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d023      	beq.n	800338a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003342:	4b6f      	ldr	r3, [pc, #444]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6e      	ldr	r2, [pc, #440]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7ff f84f 	bl	80023f0 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003356:	f7ff f84b 	bl	80023f0 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e25b      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003368:	4b65      	ldr	r3, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4b62      	ldr	r3, [pc, #392]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	495f      	ldr	r1, [pc, #380]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
 8003388:	e018      	b.n	80033bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5c      	ldr	r2, [pc, #368]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7ff f82b 	bl	80023f0 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339e:	f7ff f827 	bl	80023f0 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e237      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d03c      	beq.n	8003442 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01c      	beq.n	800340a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d0:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80033d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d6:	4a4a      	ldr	r2, [pc, #296]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7ff f806 	bl	80023f0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e8:	f7ff f802 	bl	80023f0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e212      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80033fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0ef      	beq.n	80033e8 <HAL_RCC_OscConfig+0x3ec>
 8003408:	e01b      	b.n	8003442 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 800340c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003410:	4a3b      	ldr	r2, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fe ffe9 	bl	80023f0 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003422:	f7fe ffe5 	bl	80023f0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e1f5      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ef      	bne.n	8003422 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80a6 	beq.w	800359c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003450:	2300      	movs	r3, #0
 8003452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003454:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10d      	bne.n	800347c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003460:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	4a26      	ldr	r2, [pc, #152]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 8003466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346a:	6593      	str	r3, [r2, #88]	; 0x58
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003478:	2301      	movs	r3, #1
 800347a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCC_OscConfig+0x508>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d118      	bne.n	80034ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003488:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <HAL_RCC_OscConfig+0x508>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <HAL_RCC_OscConfig+0x508>)
 800348e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003494:	f7fe ffac 	bl	80023f0 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7fe ffa8 	bl	80023f0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1b8      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_RCC_OscConfig+0x508>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4d8>
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d2:	e029      	b.n	8003528 <HAL_RCC_OscConfig+0x52c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d115      	bne.n	8003508 <HAL_RCC_OscConfig+0x50c>
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	4a07      	ldr	r2, [pc, #28]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	4a03      	ldr	r2, [pc, #12]	; (8003500 <HAL_RCC_OscConfig+0x504>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034fc:	e014      	b.n	8003528 <HAL_RCC_OscConfig+0x52c>
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
 8003508:	4b9d      	ldr	r3, [pc, #628]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	4a9c      	ldr	r2, [pc, #624]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003518:	4b99      	ldr	r3, [pc, #612]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	4a98      	ldr	r2, [pc, #608]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d016      	beq.n	800355e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe ff5e 	bl	80023f0 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe ff5a 	bl	80023f0 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e168      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354e:	4b8c      	ldr	r3, [pc, #560]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ed      	beq.n	8003538 <HAL_RCC_OscConfig+0x53c>
 800355c:	e015      	b.n	800358a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355e:	f7fe ff47 	bl	80023f0 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fe ff43 	bl	80023f0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e151      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800357c:	4b80      	ldr	r3, [pc, #512]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ed      	bne.n	8003566 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358a:	7ffb      	ldrb	r3, [r7, #31]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	4a7a      	ldr	r2, [pc, #488]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d03c      	beq.n	8003622 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01c      	beq.n	80035ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035b0:	4b73      	ldr	r3, [pc, #460]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80035b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b6:	4a72      	ldr	r2, [pc, #456]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fe ff16 	bl	80023f0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c8:	f7fe ff12 	bl	80023f0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e122      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035da:	4b69      	ldr	r3, [pc, #420]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80035dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ef      	beq.n	80035c8 <HAL_RCC_OscConfig+0x5cc>
 80035e8:	e01b      	b.n	8003622 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ea:	4b65      	ldr	r3, [pc, #404]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80035ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f0:	4a63      	ldr	r2, [pc, #396]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe fef9 	bl	80023f0 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003602:	f7fe fef5 	bl	80023f0 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e105      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003614:	4b5a      	ldr	r3, [pc, #360]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1ef      	bne.n	8003602 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80f9 	beq.w	800381e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	2b02      	cmp	r3, #2
 8003632:	f040 80cf 	bne.w	80037d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003636:	4b52      	ldr	r3, [pc, #328]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0203 	and.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	429a      	cmp	r2, r3
 8003648:	d12c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	3b01      	subs	r3, #1
 8003656:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d123      	bne.n	80036a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d11b      	bne.n	80036a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d113      	bne.n	80036a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d109      	bne.n	80036a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	3b01      	subs	r3, #1
 800369e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d071      	beq.n	8003788 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d068      	beq.n	800377c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036aa:	4b35      	ldr	r3, [pc, #212]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036b6:	4b32      	ldr	r3, [pc, #200]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0ac      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036c6:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80036cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d2:	f7fe fe8d 	bl	80023f0 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe fe89 	bl	80023f0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e099      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f8:	4b21      	ldr	r3, [pc, #132]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCC_OscConfig+0x788>)
 80036fe:	4013      	ands	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003708:	3a01      	subs	r2, #1
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003712:	0212      	lsls	r2, r2, #8
 8003714:	4311      	orrs	r1, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800371a:	0852      	lsrs	r2, r2, #1
 800371c:	3a01      	subs	r2, #1
 800371e:	0552      	lsls	r2, r2, #21
 8003720:	4311      	orrs	r1, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003726:	0852      	lsrs	r2, r2, #1
 8003728:	3a01      	subs	r2, #1
 800372a:	0652      	lsls	r2, r2, #25
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003732:	06d2      	lsls	r2, r2, #27
 8003734:	430a      	orrs	r2, r1
 8003736:	4912      	ldr	r1, [pc, #72]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003738:	4313      	orrs	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003754:	f7fe fe4c 	bl	80023f0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7fe fe48 	bl	80023f0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e058      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <HAL_RCC_OscConfig+0x784>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800377a:	e050      	b.n	800381e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e04f      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
 8003780:	40021000 	.word	0x40021000
 8003784:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003788:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d144      	bne.n	800381e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037ac:	f7fe fe20 	bl	80023f0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fe1c 	bl	80023f0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e02c      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x7b8>
 80037d2:	e024      	b.n	800381e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d01f      	beq.n	800381a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 80037e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fe fe03 	bl	80023f0 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe fdff 	bl	80023f0 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e00f      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	4905      	ldr	r1, [pc, #20]	; (8003828 <HAL_RCC_OscConfig+0x82c>)
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_OscConfig+0x830>)
 8003814:	4013      	ands	r3, r2
 8003816:	60cb      	str	r3, [r1, #12]
 8003818:	e001      	b.n	800381e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	feeefffc 	.word	0xfeeefffc

08003830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0e7      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b75      	ldr	r3, [pc, #468]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d910      	bls.n	8003874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b72      	ldr	r3, [pc, #456]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 0207 	bic.w	r2, r3, #7
 800385a:	4970      	ldr	r1, [pc, #448]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b6e      	ldr	r3, [pc, #440]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0cf      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	4b66      	ldr	r3, [pc, #408]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388c:	429a      	cmp	r2, r3
 800388e:	d908      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4960      	ldr	r1, [pc, #384]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d04c      	beq.n	8003948 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d121      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0a6      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ce:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d115      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e09a      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e6:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e08e      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f6:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e086      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003906:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4943      	ldr	r1, [pc, #268]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fe fd6a 	bl	80023f0 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fe fd66 	bl	80023f0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e06e      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 020c 	and.w	r2, r3, #12
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	429a      	cmp	r2, r3
 8003946:	d1eb      	bne.n	8003920 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	429a      	cmp	r2, r3
 8003962:	d208      	bcs.n	8003976 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	492b      	ldr	r1, [pc, #172]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d210      	bcs.n	80039a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 0207 	bic.w	r2, r3, #7
 800398c:	4923      	ldr	r1, [pc, #140]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003994:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e036      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4918      	ldr	r1, [pc, #96]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4910      	ldr	r1, [pc, #64]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e4:	f000 f824 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	490b      	ldr	r1, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1f4>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x1f8>)
 8003a02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1fc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fca1 	bl	8002350 <HAL_InitTick>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a12:	7afb      	ldrb	r3, [r7, #11]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08007c6c 	.word	0x08007c6c
 8003a28:	20000010 	.word	0x20000010
 8003a2c:	20000014 	.word	0x20000014

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d121      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d11e      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	e005      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e004      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab4:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ab6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d134      	bne.n	8003b28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d003      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xac>
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad8:	617b      	str	r3, [r7, #20]
      break;
 8003ada:	e005      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ade:	617b      	str	r3, [r7, #20]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	617b      	str	r3, [r7, #20]
      break;
 8003ae6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	3301      	adds	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	fb03 f202 	mul.w	r2, r3, r2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	0e5b      	lsrs	r3, r3, #25
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b28:	69bb      	ldr	r3, [r7, #24]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08007c84 	.word	0x08007c84
 8003b40:	00f42400 	.word	0x00f42400
 8003b44:	007a1200 	.word	0x007a1200

08003b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000010 	.word	0x20000010

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b64:	f7ff fff0 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08007c7c 	.word	0x08007c7c

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b90:	f7ff ffda 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0adb      	lsrs	r3, r3, #11
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	08007c7c 	.word	0x08007c7c

08003bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7ff f990 	bl	8002ef4 <HAL_PWREx_GetVoltageRange>
 8003bd4:	6178      	str	r0, [r7, #20]
 8003bd6:	e014      	b.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4a24      	ldr	r2, [pc, #144]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6593      	str	r3, [r2, #88]	; 0x58
 8003be4:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bf0:	f7ff f980 	bl	8002ef4 <HAL_PWREx_GetVoltageRange>
 8003bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c08:	d10b      	bne.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d919      	bls.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2ba0      	cmp	r3, #160	; 0xa0
 8003c14:	d902      	bls.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c16:	2302      	movs	r3, #2
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	e013      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e010      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d902      	bls.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c28:	2303      	movs	r3, #3
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e00a      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d102      	bne.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c34:	2302      	movs	r3, #2
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e004      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b70      	cmp	r3, #112	; 0x70
 8003c3e:	d101      	bne.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c40:	2301      	movs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 0207 	bic.w	r2, r3, #7
 8003c4c:	4909      	ldr	r1, [pc, #36]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40022000 	.word	0x40022000

08003c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c80:	2300      	movs	r3, #0
 8003c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d041      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c9c:	d02a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ca2:	d824      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ca4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ca8:	d008      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003caa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cae:	d81e      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb8:	d010      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cba:	e018      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cbc:	4b86      	ldr	r3, [pc, #536]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a85      	ldr	r2, [pc, #532]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fadd 	bl	8004290 <RCCEx_PLLSAI1_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cda:	e00c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3320      	adds	r3, #32
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fbc6 	bl	8004474 <RCCEx_PLLSAI2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cfc:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0a:	4973      	ldr	r1, [pc, #460]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d041      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d2c:	d02a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d32:	d824      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d3e:	d81e      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d48:	d010      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d4a:	e018      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d4c:	4b62      	ldr	r3, [pc, #392]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a61      	ldr	r2, [pc, #388]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d58:	e015      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fa95 	bl	8004290 <RCCEx_PLLSAI1_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d6a:	e00c      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3320      	adds	r3, #32
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fb7e 	bl	8004474 <RCCEx_PLLSAI2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d7c:	e003      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	74fb      	strb	r3, [r7, #19]
      break;
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d8c:	4b52      	ldr	r3, [pc, #328]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9a:	494f      	ldr	r1, [pc, #316]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003da2:	e001      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a0 	beq.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd0:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6593      	str	r3, [r2, #88]	; 0x58
 8003ddc:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de8:	2301      	movs	r3, #1
 8003dea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3a      	ldr	r2, [pc, #232]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003df8:	f7fe fafa 	bl	80023f0 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dfe:	e009      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e00:	f7fe faf6 	bl	80023f0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d902      	bls.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	74fb      	strb	r3, [r7, #19]
        break;
 8003e12:	e005      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ef      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d15c      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e26:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01f      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d019      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e50:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	4a20      	ldr	r2, [pc, #128]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe fab5 	bl	80023f0 <HAL_GetTick>
 8003e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e88:	e00b      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fe fab1 	bl	80023f0 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d902      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8003ea0:	e006      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ec      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	4904      	ldr	r1, [pc, #16]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ece:	e009      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	74bb      	strb	r3, [r7, #18]
 8003ed4:	e006      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee4:	7c7b      	ldrb	r3, [r7, #17]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eea:	4ba6      	ldr	r3, [pc, #664]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	4aa5      	ldr	r2, [pc, #660]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f02:	4ba0      	ldr	r3, [pc, #640]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f023 0203 	bic.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	499c      	ldr	r1, [pc, #624]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f24:	4b97      	ldr	r3, [pc, #604]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 020c 	bic.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	4994      	ldr	r1, [pc, #592]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f46:	4b8f      	ldr	r3, [pc, #572]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	498b      	ldr	r1, [pc, #556]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f68:	4b86      	ldr	r3, [pc, #536]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	4983      	ldr	r1, [pc, #524]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f8a:	4b7e      	ldr	r3, [pc, #504]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f98:	497a      	ldr	r1, [pc, #488]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fac:	4b75      	ldr	r3, [pc, #468]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fba:	4972      	ldr	r1, [pc, #456]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fce:	4b6d      	ldr	r3, [pc, #436]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fdc:	4969      	ldr	r1, [pc, #420]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ff0:	4b64      	ldr	r3, [pc, #400]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ffe:	4961      	ldr	r1, [pc, #388]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004012:	4b5c      	ldr	r3, [pc, #368]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004020:	4958      	ldr	r1, [pc, #352]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004034:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	4950      	ldr	r1, [pc, #320]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004056:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	4947      	ldr	r1, [pc, #284]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004078:	4b42      	ldr	r3, [pc, #264]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800407a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	493f      	ldr	r1, [pc, #252]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d028      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409a:	4b3a      	ldr	r3, [pc, #232]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4936      	ldr	r1, [pc, #216]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b8:	d106      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ba:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	4a31      	ldr	r2, [pc, #196]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c4:	60d3      	str	r3, [r2, #12]
 80040c6:	e011      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2101      	movs	r1, #1
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f8d9 	bl	8004290 <RCCEx_PLLSAI1_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d028      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040f8:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004106:	491f      	ldr	r1, [pc, #124]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004116:	d106      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800411e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004122:	60d3      	str	r3, [r2, #12]
 8004124:	e011      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800412e:	d10c      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f8aa 	bl	8004290 <RCCEx_PLLSAI1_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004164:	4907      	ldr	r1, [pc, #28]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004174:	d108      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004176:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800417c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004180:	60d3      	str	r3, [r2, #12]
 8004182:	e013      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004184:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004190:	d10c      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	2101      	movs	r1, #1
 8004198:	4618      	mov	r0, r3
 800419a:	f000 f879 	bl	8004290 <RCCEx_PLLSAI1_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02f      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b8:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	4929      	ldr	r1, [pc, #164]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d6:	d10d      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f856 	bl	8004290 <RCCEx_PLLSAI1_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d014      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	74bb      	strb	r3, [r7, #18]
 80041f2:	e011      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fc:	d10c      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3320      	adds	r3, #32
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f935 	bl	8004474 <RCCEx_PLLSAI2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004234:	490d      	ldr	r1, [pc, #52]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004248:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004258:	4904      	ldr	r1, [pc, #16]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004260:	7cbb      	ldrb	r3, [r7, #18]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a04      	ldr	r2, [pc, #16]	; (800428c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800427a:	f043 0304 	orr.w	r3, r3, #4
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000

08004290 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800429e:	4b74      	ldr	r3, [pc, #464]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d018      	beq.n	80042dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042aa:	4b71      	ldr	r3, [pc, #452]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f003 0203 	and.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d10d      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
       ||
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042c2:	4b6b      	ldr	r3, [pc, #428]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
       ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d047      	beq.n	8004366 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	e044      	b.n	8004366 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d018      	beq.n	8004316 <RCCEx_PLLSAI1_Config+0x86>
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d825      	bhi.n	8004334 <RCCEx_PLLSAI1_Config+0xa4>
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d002      	beq.n	80042f2 <RCCEx_PLLSAI1_Config+0x62>
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d009      	beq.n	8004304 <RCCEx_PLLSAI1_Config+0x74>
 80042f0:	e020      	b.n	8004334 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042f2:	4b5f      	ldr	r3, [pc, #380]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d11d      	bne.n	800433a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004302:	e01a      	b.n	800433a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004304:	4b5a      	ldr	r3, [pc, #360]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004314:	e013      	b.n	800433e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004322:	4b53      	ldr	r3, [pc, #332]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004332:	e006      	b.n	8004342 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	e004      	b.n	8004344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800433a:	bf00      	nop
 800433c:	e002      	b.n	8004344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004342:	bf00      	nop
    }

    if(status == HAL_OK)
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10d      	bne.n	8004366 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800434a:	4b49      	ldr	r3, [pc, #292]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	3b01      	subs	r3, #1
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	430b      	orrs	r3, r1
 8004360:	4943      	ldr	r1, [pc, #268]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004362:	4313      	orrs	r3, r2
 8004364:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d17c      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800436c:	4b40      	ldr	r3, [pc, #256]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3f      	ldr	r2, [pc, #252]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004378:	f7fe f83a 	bl	80023f0 <HAL_GetTick>
 800437c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800437e:	e009      	b.n	8004394 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004380:	f7fe f836 	bl	80023f0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d902      	bls.n	8004394 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	73fb      	strb	r3, [r7, #15]
        break;
 8004392:	e005      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ef      	bne.n	8004380 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d15f      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d110      	bne.n	80043ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ac:	4b30      	ldr	r3, [pc, #192]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80043b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6892      	ldr	r2, [r2, #8]
 80043bc:	0211      	lsls	r1, r2, #8
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68d2      	ldr	r2, [r2, #12]
 80043c2:	06d2      	lsls	r2, r2, #27
 80043c4:	430a      	orrs	r2, r1
 80043c6:	492a      	ldr	r1, [pc, #168]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	610b      	str	r3, [r1, #16]
 80043cc:	e027      	b.n	800441e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d112      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043d4:	4b26      	ldr	r3, [pc, #152]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6892      	ldr	r2, [r2, #8]
 80043e4:	0211      	lsls	r1, r2, #8
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6912      	ldr	r2, [r2, #16]
 80043ea:	0852      	lsrs	r2, r2, #1
 80043ec:	3a01      	subs	r2, #1
 80043ee:	0552      	lsls	r2, r2, #21
 80043f0:	430a      	orrs	r2, r1
 80043f2:	491f      	ldr	r1, [pc, #124]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	610b      	str	r3, [r1, #16]
 80043f8:	e011      	b.n	800441e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004402:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6892      	ldr	r2, [r2, #8]
 800440a:	0211      	lsls	r1, r2, #8
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6952      	ldr	r2, [r2, #20]
 8004410:	0852      	lsrs	r2, r2, #1
 8004412:	3a01      	subs	r2, #1
 8004414:	0652      	lsls	r2, r2, #25
 8004416:	430a      	orrs	r2, r1
 8004418:	4915      	ldr	r1, [pc, #84]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004424:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004428:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442a:	f7fd ffe1 	bl	80023f0 <HAL_GetTick>
 800442e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004430:	e009      	b.n	8004446 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004432:	f7fd ffdd 	bl	80023f0 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d902      	bls.n	8004446 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	73fb      	strb	r3, [r7, #15]
          break;
 8004444:	e005      	b.n	8004452 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0ef      	beq.n	8004432 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	4903      	ldr	r1, [pc, #12]	; (8004470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000

08004474 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004482:	4b69      	ldr	r3, [pc, #420]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d018      	beq.n	80044c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800448e:	4b66      	ldr	r3, [pc, #408]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0203 	and.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d10d      	bne.n	80044ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
       ||
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044a6:	4b60      	ldr	r3, [pc, #384]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
       ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d047      	beq.n	800454a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
 80044be:	e044      	b.n	800454a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d018      	beq.n	80044fa <RCCEx_PLLSAI2_Config+0x86>
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d825      	bhi.n	8004518 <RCCEx_PLLSAI2_Config+0xa4>
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d002      	beq.n	80044d6 <RCCEx_PLLSAI2_Config+0x62>
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d009      	beq.n	80044e8 <RCCEx_PLLSAI2_Config+0x74>
 80044d4:	e020      	b.n	8004518 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044d6:	4b54      	ldr	r3, [pc, #336]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11d      	bne.n	800451e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e6:	e01a      	b.n	800451e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044e8:	4b4f      	ldr	r3, [pc, #316]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d116      	bne.n	8004522 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f8:	e013      	b.n	8004522 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044fa:	4b4b      	ldr	r3, [pc, #300]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004506:	4b48      	ldr	r3, [pc, #288]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004516:	e006      	b.n	8004526 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      break;
 800451c:	e004      	b.n	8004528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800451e:	bf00      	nop
 8004520:	e002      	b.n	8004528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004526:	bf00      	nop
    }

    if(status == HAL_OK)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10d      	bne.n	800454a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800452e:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	3b01      	subs	r3, #1
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	430b      	orrs	r3, r1
 8004544:	4938      	ldr	r1, [pc, #224]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d166      	bne.n	800461e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004550:	4b35      	ldr	r3, [pc, #212]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a34      	ldr	r2, [pc, #208]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455c:	f7fd ff48 	bl	80023f0 <HAL_GetTick>
 8004560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004562:	e009      	b.n	8004578 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004564:	f7fd ff44 	bl	80023f0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d902      	bls.n	8004578 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	73fb      	strb	r3, [r7, #15]
        break;
 8004576:	e005      	b.n	8004584 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004578:	4b2b      	ldr	r3, [pc, #172]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ef      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d149      	bne.n	800461e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d110      	bne.n	80045b2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6892      	ldr	r2, [r2, #8]
 80045a0:	0211      	lsls	r1, r2, #8
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68d2      	ldr	r2, [r2, #12]
 80045a6:	06d2      	lsls	r2, r2, #27
 80045a8:	430a      	orrs	r2, r1
 80045aa:	491f      	ldr	r1, [pc, #124]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	614b      	str	r3, [r1, #20]
 80045b0:	e011      	b.n	80045d6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6892      	ldr	r2, [r2, #8]
 80045c2:	0211      	lsls	r1, r2, #8
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6912      	ldr	r2, [r2, #16]
 80045c8:	0852      	lsrs	r2, r2, #1
 80045ca:	3a01      	subs	r2, #1
 80045cc:	0652      	lsls	r2, r2, #25
 80045ce:	430a      	orrs	r2, r1
 80045d0:	4915      	ldr	r1, [pc, #84]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fd ff05 	bl	80023f0 <HAL_GetTick>
 80045e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045e8:	e009      	b.n	80045fe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045ea:	f7fd ff01 	bl	80023f0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d902      	bls.n	80045fe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	73fb      	strb	r3, [r7, #15]
          break;
 80045fc:	e005      	b.n	800460a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ef      	beq.n	80045ea <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	4903      	ldr	r1, [pc, #12]	; (8004628 <RCCEx_PLLSAI2_Config+0x1b4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40021000 	.word	0x40021000

0800462c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e049      	b.n	80046d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd fc22 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f000 fd12 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d001      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e04f      	b.n	8004794 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d018      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <HAL_TIM_Base_Start_IT+0xd0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d015      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d011      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e008      	b.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e000      	b.n	8004792 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40013400 	.word	0x40013400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	00010007 	.word	0x00010007

080047bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e049      	b.n	8004862 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f841 	bl	800486a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 fc4a 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e049      	b.n	8004924 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f841 	bl	800492c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f000 fbe9 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d122      	bne.n	800499c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d11b      	bne.n	800499c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0202 	mvn.w	r2, #2
 800496c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fb67 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fb59 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb6a 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d122      	bne.n	80049f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d11b      	bne.n	80049f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0204 	mvn.w	r2, #4
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fb3d 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 80049dc:	e005      	b.n	80049ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fb2f 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fb40 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d122      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d11b      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0208 	mvn.w	r2, #8
 8004a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2204      	movs	r2, #4
 8004a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fb13 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004a30:	e005      	b.n	8004a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fb05 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fb16 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d122      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d11b      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0210 	mvn.w	r2, #16
 8004a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fae9 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004a84:	e005      	b.n	8004a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fadb 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 faec 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d10e      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d107      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0201 	mvn.w	r2, #1
 8004abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fab5 	bl	800502e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b80      	cmp	r3, #128	; 0x80
 8004ad0:	d10e      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d107      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 ff6e 	bl	80059cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afe:	d10e      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d107      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 ff61 	bl	80059e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d10e      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d107      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa9a 	bl	800507e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d10e      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f06f 0220 	mvn.w	r2, #32
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 ff21 	bl	80059b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e066      	b.n	8004c6c <HAL_TIM_OC_ConfigChannel+0xec>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b14      	cmp	r3, #20
 8004baa:	d857      	bhi.n	8004c5c <HAL_TIM_OC_ConfigChannel+0xdc>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004c5d 	.word	0x08004c5d
 8004bbc:	08004c5d 	.word	0x08004c5d
 8004bc0:	08004c5d 	.word	0x08004c5d
 8004bc4:	08004c17 	.word	0x08004c17
 8004bc8:	08004c5d 	.word	0x08004c5d
 8004bcc:	08004c5d 	.word	0x08004c5d
 8004bd0:	08004c5d 	.word	0x08004c5d
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c5d 	.word	0x08004c5d
 8004bdc:	08004c5d 	.word	0x08004c5d
 8004be0:	08004c5d 	.word	0x08004c5d
 8004be4:	08004c33 	.word	0x08004c33
 8004be8:	08004c5d 	.word	0x08004c5d
 8004bec:	08004c5d 	.word	0x08004c5d
 8004bf0:	08004c5d 	.word	0x08004c5d
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c5d 	.word	0x08004c5d
 8004bfc:	08004c5d 	.word	0x08004c5d
 8004c00:	08004c5d 	.word	0x08004c5d
 8004c04:	08004c4f 	.word	0x08004c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fada 	bl	80051c8 <TIM_OC1_SetConfig>
      break;
 8004c14:	e025      	b.n	8004c62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fb63 	bl	80052e8 <TIM_OC2_SetConfig>
      break;
 8004c22:	e01e      	b.n	8004c62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fbe6 	bl	80053fc <TIM_OC3_SetConfig>
      break;
 8004c30:	e017      	b.n	8004c62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fc67 	bl	800550c <TIM_OC4_SetConfig>
      break;
 8004c3e:	e010      	b.n	8004c62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fcca 	bl	80055e0 <TIM_OC5_SetConfig>
      break;
 8004c4c:	e009      	b.n	8004c62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fd27 	bl	80056a8 <TIM_OC6_SetConfig>
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e0ff      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b14      	cmp	r3, #20
 8004c9e:	f200 80f0 	bhi.w	8004e82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ca2:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004e83 	.word	0x08004e83
 8004cb0:	08004e83 	.word	0x08004e83
 8004cb4:	08004e83 	.word	0x08004e83
 8004cb8:	08004d3d 	.word	0x08004d3d
 8004cbc:	08004e83 	.word	0x08004e83
 8004cc0:	08004e83 	.word	0x08004e83
 8004cc4:	08004e83 	.word	0x08004e83
 8004cc8:	08004d7f 	.word	0x08004d7f
 8004ccc:	08004e83 	.word	0x08004e83
 8004cd0:	08004e83 	.word	0x08004e83
 8004cd4:	08004e83 	.word	0x08004e83
 8004cd8:	08004dbf 	.word	0x08004dbf
 8004cdc:	08004e83 	.word	0x08004e83
 8004ce0:	08004e83 	.word	0x08004e83
 8004ce4:	08004e83 	.word	0x08004e83
 8004ce8:	08004e01 	.word	0x08004e01
 8004cec:	08004e83 	.word	0x08004e83
 8004cf0:	08004e83 	.word	0x08004e83
 8004cf4:	08004e83 	.word	0x08004e83
 8004cf8:	08004e41 	.word	0x08004e41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fa60 	bl	80051c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0208 	orr.w	r2, r2, #8
 8004d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6999      	ldr	r1, [r3, #24]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	619a      	str	r2, [r3, #24]
      break;
 8004d3a:	e0a5      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fad0 	bl	80052e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	619a      	str	r2, [r3, #24]
      break;
 8004d7c:	e084      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fb39 	bl	80053fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0208 	orr.w	r2, r2, #8
 8004d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0204 	bic.w	r2, r2, #4
 8004da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69d9      	ldr	r1, [r3, #28]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	61da      	str	r2, [r3, #28]
      break;
 8004dbc:	e064      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fba1 	bl	800550c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69d9      	ldr	r1, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	021a      	lsls	r2, r3, #8
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	61da      	str	r2, [r3, #28]
      break;
 8004dfe:	e043      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fbea 	bl	80055e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0208 	orr.w	r2, r2, #8
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0204 	bic.w	r2, r2, #4
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e3e:	e023      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fc2e 	bl	80056a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	021a      	lsls	r2, r3, #8
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e80:	e002      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
      break;
 8004e86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop

08004e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e0b6      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x18a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef4:	d03e      	beq.n	8004f74 <HAL_TIM_ConfigClockSource+0xd8>
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	f200 8087 	bhi.w	800500c <HAL_TIM_ConfigClockSource+0x170>
 8004efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f02:	f000 8086 	beq.w	8005012 <HAL_TIM_ConfigClockSource+0x176>
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	d87f      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x170>
 8004f0c:	2b70      	cmp	r3, #112	; 0x70
 8004f0e:	d01a      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0xaa>
 8004f10:	2b70      	cmp	r3, #112	; 0x70
 8004f12:	d87b      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x170>
 8004f14:	2b60      	cmp	r3, #96	; 0x60
 8004f16:	d050      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x11e>
 8004f18:	2b60      	cmp	r3, #96	; 0x60
 8004f1a:	d877      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x170>
 8004f1c:	2b50      	cmp	r3, #80	; 0x50
 8004f1e:	d03c      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0xfe>
 8004f20:	2b50      	cmp	r3, #80	; 0x50
 8004f22:	d873      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x170>
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d058      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x13e>
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d86f      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x170>
 8004f2c:	2b30      	cmp	r3, #48	; 0x30
 8004f2e:	d064      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x15e>
 8004f30:	2b30      	cmp	r3, #48	; 0x30
 8004f32:	d86b      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x170>
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d060      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x15e>
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d867      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x170>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d05c      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x15e>
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d05a      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x15e>
 8004f44:	e062      	b.n	800500c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6899      	ldr	r1, [r3, #8]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f000 fc87 	bl	8005868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	609a      	str	r2, [r3, #8]
      break;
 8004f72:	e04f      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6899      	ldr	r1, [r3, #8]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f000 fc70 	bl	8005868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f96:	609a      	str	r2, [r3, #8]
      break;
 8004f98:	e03c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f000 fbe4 	bl	8005774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2150      	movs	r1, #80	; 0x50
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fc3d 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e02c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 fc03 	bl	80057d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2160      	movs	r1, #96	; 0x60
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fc2d 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e01c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6859      	ldr	r1, [r3, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f000 fbc4 	bl	8005774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2140      	movs	r1, #64	; 0x40
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fc1d 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8004ff8:	e00c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f000 fc14 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 800500a:	e003      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
      break;
 8005010:	e000      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a40      	ldr	r2, [pc, #256]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d00f      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3d      	ldr	r2, [pc, #244]	; (80051ac <TIM_Base_SetConfig+0x118>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3c      	ldr	r2, [pc, #240]	; (80051b0 <TIM_Base_SetConfig+0x11c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3b      	ldr	r2, [pc, #236]	; (80051b4 <TIM_Base_SetConfig+0x120>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3a      	ldr	r2, [pc, #232]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d108      	bne.n	80050e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01f      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d01b      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2c      	ldr	r2, [pc, #176]	; (80051ac <TIM_Base_SetConfig+0x118>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d017      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2b      	ldr	r2, [pc, #172]	; (80051b0 <TIM_Base_SetConfig+0x11c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <TIM_Base_SetConfig+0x120>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a28      	ldr	r2, [pc, #160]	; (80051bc <TIM_Base_SetConfig+0x128>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <TIM_Base_SetConfig+0x12c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <TIM_Base_SetConfig+0x130>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00f      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a11      	ldr	r2, [pc, #68]	; (80051bc <TIM_Base_SetConfig+0x128>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <TIM_Base_SetConfig+0x12c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0f      	ldr	r2, [pc, #60]	; (80051c4 <TIM_Base_SetConfig+0x130>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d103      	bne.n	8005194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	615a      	str	r2, [r3, #20]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 0302 	bic.w	r3, r3, #2
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <TIM_OC1_SetConfig+0x10c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <TIM_OC1_SetConfig+0x110>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <TIM_OC1_SetConfig+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <TIM_OC1_SetConfig+0x118>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <TIM_OC1_SetConfig+0x11c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10c      	bne.n	8005262 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0308 	bic.w	r3, r3, #8
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <TIM_OC1_SetConfig+0x10c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <TIM_OC1_SetConfig+0x110>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <TIM_OC1_SetConfig+0x114>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <TIM_OC1_SetConfig+0x118>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a17      	ldr	r2, [pc, #92]	; (80052e4 <TIM_OC1_SetConfig+0x11c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800

080052e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f023 0210 	bic.w	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0320 	bic.w	r3, r3, #32
 8005336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <TIM_OC2_SetConfig+0x100>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC2_SetConfig+0x6c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a27      	ldr	r2, [pc, #156]	; (80053ec <TIM_OC2_SetConfig+0x104>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10d      	bne.n	8005370 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <TIM_OC2_SetConfig+0x100>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00f      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <TIM_OC2_SetConfig+0x104>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00b      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <TIM_OC2_SetConfig+0x108>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <TIM_OC2_SetConfig+0x10c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a19      	ldr	r2, [pc, #100]	; (80053f8 <TIM_OC2_SetConfig+0x110>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d113      	bne.n	80053c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800539e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40013400 	.word	0x40013400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <TIM_OC3_SetConfig+0xfc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC3_SetConfig+0x6a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <TIM_OC3_SetConfig+0x100>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <TIM_OC3_SetConfig+0xfc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <TIM_OC3_SetConfig+0x100>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <TIM_OC3_SetConfig+0x104>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <TIM_OC3_SetConfig+0x108>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a18      	ldr	r2, [pc, #96]	; (8005508 <TIM_OC3_SetConfig+0x10c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d113      	bne.n	80054d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40013400 	.word	0x40013400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800555a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <TIM_OC4_SetConfig+0xc0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a17      	ldr	r2, [pc, #92]	; (80055d0 <TIM_OC4_SetConfig+0xc4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <TIM_OC4_SetConfig+0xc8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <TIM_OC4_SetConfig+0xcc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a14      	ldr	r2, [pc, #80]	; (80055dc <TIM_OC4_SetConfig+0xd0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d109      	bne.n	80055a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005624:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a17      	ldr	r2, [pc, #92]	; (8005694 <TIM_OC5_SetConfig+0xb4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00f      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <TIM_OC5_SetConfig+0xb8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a15      	ldr	r2, [pc, #84]	; (800569c <TIM_OC5_SetConfig+0xbc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a14      	ldr	r2, [pc, #80]	; (80056a0 <TIM_OC5_SetConfig+0xc0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <TIM_OC5_SetConfig+0xc4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d109      	bne.n	800566e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800

080056a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	051b      	lsls	r3, r3, #20
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a18      	ldr	r2, [pc, #96]	; (8005760 <TIM_OC6_SetConfig+0xb8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00f      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a17      	ldr	r2, [pc, #92]	; (8005764 <TIM_OC6_SetConfig+0xbc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00b      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a16      	ldr	r2, [pc, #88]	; (8005768 <TIM_OC6_SetConfig+0xc0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <TIM_OC6_SetConfig+0xc4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_OC6_SetConfig+0xc8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d109      	bne.n	8005738 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 030a 	bic.w	r3, r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0210 	bic.w	r2, r3, #16
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800580e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	f043 0307 	orr.w	r3, r3, #7
 8005854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	021a      	lsls	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	431a      	orrs	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4313      	orrs	r3, r2
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058bc:	2302      	movs	r3, #2
 80058be:	e068      	b.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a2e      	ldr	r2, [pc, #184]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2d      	ldr	r2, [pc, #180]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d108      	bne.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01d      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d018      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1b      	ldr	r2, [pc, #108]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1a      	ldr	r2, [pc, #104]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00e      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d009      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d10c      	bne.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4313      	orrs	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40013400 	.word	0x40013400
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40014000 	.word	0x40014000

080059b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e040      	b.n	8005a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc f9e0 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2224      	movs	r2, #36	; 0x24
 8005a20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0201 	bic.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8c0 	bl	8005bb8 <UART_SetConfig>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e022      	b.n	8005a88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fb6c 	bl	8006128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fbf3 	bl	800626c <UART_CheckIdleState>
 8005a86:	4603      	mov	r3, r0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	f040 8082 	bne.w	8005bae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_UART_Transmit+0x26>
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e07a      	b.n	8005bb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_UART_Transmit+0x38>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e073      	b.n	8005bb0 <HAL_UART_Transmit+0x120>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2221      	movs	r2, #33	; 0x21
 8005adc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ade:	f7fc fc87 	bl	80023f0 <HAL_GetTick>
 8005ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d108      	bne.n	8005b10 <HAL_UART_Transmit+0x80>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e003      	b.n	8005b18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b20:	e02d      	b.n	8005b7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fbe6 	bl	80062fe <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e039      	b.n	8005bb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	881a      	ldrh	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b4e:	b292      	uxth	r2, r2
 8005b50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	3302      	adds	r3, #2
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e008      	b.n	8005b6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	b292      	uxth	r2, r2
 8005b64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1cb      	bne.n	8005b22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2200      	movs	r2, #0
 8005b92:	2140      	movs	r1, #64	; 0x40
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fbb2 	bl	80062fe <UART_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e005      	b.n	8005bb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e000      	b.n	8005bb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bae:	2302      	movs	r3, #2
  }
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bbc:	b08a      	sub	sp, #40	; 0x28
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	4ba4      	ldr	r3, [pc, #656]	; (8005e78 <UART_SetConfig+0x2c0>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a99      	ldr	r2, [pc, #612]	; (8005e7c <UART_SetConfig+0x2c4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d004      	beq.n	8005c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	4313      	orrs	r3, r2
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a90      	ldr	r2, [pc, #576]	; (8005e80 <UART_SetConfig+0x2c8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d126      	bne.n	8005c90 <UART_SetConfig+0xd8>
 8005c42:	4b90      	ldr	r3, [pc, #576]	; (8005e84 <UART_SetConfig+0x2cc>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d81b      	bhi.n	8005c88 <UART_SetConfig+0xd0>
 8005c50:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <UART_SetConfig+0xa0>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c81 	.word	0x08005c81
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6e:	e116      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005c70:	2302      	movs	r3, #2
 8005c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c76:	e112      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7e:	e10e      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c86:	e10a      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8e:	e106      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a7c      	ldr	r2, [pc, #496]	; (8005e88 <UART_SetConfig+0x2d0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d138      	bne.n	8005d0c <UART_SetConfig+0x154>
 8005c9a:	4b7a      	ldr	r3, [pc, #488]	; (8005e84 <UART_SetConfig+0x2cc>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca0:	f003 030c 	and.w	r3, r3, #12
 8005ca4:	2b0c      	cmp	r3, #12
 8005ca6:	d82d      	bhi.n	8005d04 <UART_SetConfig+0x14c>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0xf8>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005d05 	.word	0x08005d05
 8005cb8:	08005d05 	.word	0x08005d05
 8005cbc:	08005d05 	.word	0x08005d05
 8005cc0:	08005cf5 	.word	0x08005cf5
 8005cc4:	08005d05 	.word	0x08005d05
 8005cc8:	08005d05 	.word	0x08005d05
 8005ccc:	08005d05 	.word	0x08005d05
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	08005d05 	.word	0x08005d05
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005cfd 	.word	0x08005cfd
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e0d8      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005cec:	2302      	movs	r3, #2
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e0d4      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e0d0      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e0cc      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005d04:	2310      	movs	r3, #16
 8005d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0a:	e0c8      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a5e      	ldr	r2, [pc, #376]	; (8005e8c <UART_SetConfig+0x2d4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d125      	bne.n	8005d62 <UART_SetConfig+0x1aa>
 8005d16:	4b5b      	ldr	r3, [pc, #364]	; (8005e84 <UART_SetConfig+0x2cc>)
 8005d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d20:	2b30      	cmp	r3, #48	; 0x30
 8005d22:	d016      	beq.n	8005d52 <UART_SetConfig+0x19a>
 8005d24:	2b30      	cmp	r3, #48	; 0x30
 8005d26:	d818      	bhi.n	8005d5a <UART_SetConfig+0x1a2>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d00a      	beq.n	8005d42 <UART_SetConfig+0x18a>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d814      	bhi.n	8005d5a <UART_SetConfig+0x1a2>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <UART_SetConfig+0x182>
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d008      	beq.n	8005d4a <UART_SetConfig+0x192>
 8005d38:	e00f      	b.n	8005d5a <UART_SetConfig+0x1a2>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d40:	e0ad      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005d42:	2302      	movs	r3, #2
 8005d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d48:	e0a9      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005d4a:	2304      	movs	r3, #4
 8005d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d50:	e0a5      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005d52:	2308      	movs	r3, #8
 8005d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d58:	e0a1      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d60:	e09d      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a4a      	ldr	r2, [pc, #296]	; (8005e90 <UART_SetConfig+0x2d8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d125      	bne.n	8005db8 <UART_SetConfig+0x200>
 8005d6c:	4b45      	ldr	r3, [pc, #276]	; (8005e84 <UART_SetConfig+0x2cc>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d76:	2bc0      	cmp	r3, #192	; 0xc0
 8005d78:	d016      	beq.n	8005da8 <UART_SetConfig+0x1f0>
 8005d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d7c:	d818      	bhi.n	8005db0 <UART_SetConfig+0x1f8>
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d00a      	beq.n	8005d98 <UART_SetConfig+0x1e0>
 8005d82:	2b80      	cmp	r3, #128	; 0x80
 8005d84:	d814      	bhi.n	8005db0 <UART_SetConfig+0x1f8>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <UART_SetConfig+0x1d8>
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d008      	beq.n	8005da0 <UART_SetConfig+0x1e8>
 8005d8e:	e00f      	b.n	8005db0 <UART_SetConfig+0x1f8>
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d96:	e082      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9e:	e07e      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da6:	e07a      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dae:	e076      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db6:	e072      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a35      	ldr	r2, [pc, #212]	; (8005e94 <UART_SetConfig+0x2dc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d12a      	bne.n	8005e18 <UART_SetConfig+0x260>
 8005dc2:	4b30      	ldr	r3, [pc, #192]	; (8005e84 <UART_SetConfig+0x2cc>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd0:	d01a      	beq.n	8005e08 <UART_SetConfig+0x250>
 8005dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd6:	d81b      	bhi.n	8005e10 <UART_SetConfig+0x258>
 8005dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ddc:	d00c      	beq.n	8005df8 <UART_SetConfig+0x240>
 8005dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de2:	d815      	bhi.n	8005e10 <UART_SetConfig+0x258>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <UART_SetConfig+0x238>
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dec:	d008      	beq.n	8005e00 <UART_SetConfig+0x248>
 8005dee:	e00f      	b.n	8005e10 <UART_SetConfig+0x258>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df6:	e052      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfe:	e04e      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e06:	e04a      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0e:	e046      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e16:	e042      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <UART_SetConfig+0x2c4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d13a      	bne.n	8005e98 <UART_SetConfig+0x2e0>
 8005e22:	4b18      	ldr	r3, [pc, #96]	; (8005e84 <UART_SetConfig+0x2cc>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e30:	d01a      	beq.n	8005e68 <UART_SetConfig+0x2b0>
 8005e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e36:	d81b      	bhi.n	8005e70 <UART_SetConfig+0x2b8>
 8005e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3c:	d00c      	beq.n	8005e58 <UART_SetConfig+0x2a0>
 8005e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e42:	d815      	bhi.n	8005e70 <UART_SetConfig+0x2b8>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <UART_SetConfig+0x298>
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4c:	d008      	beq.n	8005e60 <UART_SetConfig+0x2a8>
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x2b8>
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e022      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e01e      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e66:	e01a      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6e:	e016      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e76:	e012      	b.n	8005e9e <UART_SetConfig+0x2e6>
 8005e78:	efff69f3 	.word	0xefff69f3
 8005e7c:	40008000 	.word	0x40008000
 8005e80:	40013800 	.word	0x40013800
 8005e84:	40021000 	.word	0x40021000
 8005e88:	40004400 	.word	0x40004400
 8005e8c:	40004800 	.word	0x40004800
 8005e90:	40004c00 	.word	0x40004c00
 8005e94:	40005000 	.word	0x40005000
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a9f      	ldr	r2, [pc, #636]	; (8006120 <UART_SetConfig+0x568>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d17a      	bne.n	8005f9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d824      	bhi.n	8005efa <UART_SetConfig+0x342>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0x300>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005edd 	.word	0x08005edd
 8005ebc:	08005efb 	.word	0x08005efb
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08005efb 	.word	0x08005efb
 8005ec8:	08005eeb 	.word	0x08005eeb
 8005ecc:	08005efb 	.word	0x08005efb
 8005ed0:	08005efb 	.word	0x08005efb
 8005ed4:	08005efb 	.word	0x08005efb
 8005ed8:	08005ef3 	.word	0x08005ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005edc:	f7fd fe40 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8005ee0:	61f8      	str	r0, [r7, #28]
        break;
 8005ee2:	e010      	b.n	8005f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4b8f      	ldr	r3, [pc, #572]	; (8006124 <UART_SetConfig+0x56c>)
 8005ee6:	61fb      	str	r3, [r7, #28]
        break;
 8005ee8:	e00d      	b.n	8005f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7fd fda1 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005eee:	61f8      	str	r0, [r7, #28]
        break;
 8005ef0:	e009      	b.n	8005f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef6:	61fb      	str	r3, [r7, #28]
        break;
 8005ef8:	e005      	b.n	8005f06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80fb 	beq.w	8006104 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	4413      	add	r3, r2
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d305      	bcc.n	8005f2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d903      	bls.n	8005f32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f30:	e0e8      	b.n	8006104 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	2200      	movs	r2, #0
 8005f36:	461c      	mov	r4, r3
 8005f38:	4615      	mov	r5, r2
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	022b      	lsls	r3, r5, #8
 8005f44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f48:	0222      	lsls	r2, r4, #8
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	6849      	ldr	r1, [r1, #4]
 8005f4e:	0849      	lsrs	r1, r1, #1
 8005f50:	2000      	movs	r0, #0
 8005f52:	4688      	mov	r8, r1
 8005f54:	4681      	mov	r9, r0
 8005f56:	eb12 0a08 	adds.w	sl, r2, r8
 8005f5a:	eb43 0b09 	adc.w	fp, r3, r9
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	603b      	str	r3, [r7, #0]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	4659      	mov	r1, fp
 8005f70:	f7fa f996 	bl	80002a0 <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4613      	mov	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f82:	d308      	bcc.n	8005f96 <UART_SetConfig+0x3de>
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8a:	d204      	bcs.n	8005f96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	60da      	str	r2, [r3, #12]
 8005f94:	e0b6      	b.n	8006104 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f9c:	e0b2      	b.n	8006104 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa6:	d15e      	bne.n	8006066 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d828      	bhi.n	8006002 <UART_SetConfig+0x44a>
 8005fb0:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0x400>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	08006003 	.word	0x08006003
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08006003 	.word	0x08006003
 8005fd4:	08006003 	.word	0x08006003
 8005fd8:	08005ffb 	.word	0x08005ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fdc:	f7fd fdc0 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8005fe0:	61f8      	str	r0, [r7, #28]
        break;
 8005fe2:	e014      	b.n	800600e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe4:	f7fd fdd2 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8005fe8:	61f8      	str	r0, [r7, #28]
        break;
 8005fea:	e010      	b.n	800600e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fec:	4b4d      	ldr	r3, [pc, #308]	; (8006124 <UART_SetConfig+0x56c>)
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e00d      	b.n	800600e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7fd fd1d 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005ff6:	61f8      	str	r0, [r7, #28]
        break;
 8005ff8:	e009      	b.n	800600e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffe:	61fb      	str	r3, [r7, #28]
        break;
 8006000:	e005      	b.n	800600e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800600c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d077      	beq.n	8006104 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	005a      	lsls	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	441a      	add	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b0f      	cmp	r3, #15
 800602e:	d916      	bls.n	800605e <UART_SetConfig+0x4a6>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006036:	d212      	bcs.n	800605e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f023 030f 	bic.w	r3, r3, #15
 8006040:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	b29b      	uxth	r3, r3
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	b29a      	uxth	r2, r3
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	4313      	orrs	r3, r2
 8006052:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	8afa      	ldrh	r2, [r7, #22]
 800605a:	60da      	str	r2, [r3, #12]
 800605c:	e052      	b.n	8006104 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006064:	e04e      	b.n	8006104 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800606a:	2b08      	cmp	r3, #8
 800606c:	d827      	bhi.n	80060be <UART_SetConfig+0x506>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0x4bc>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006099 	.word	0x08006099
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060a9 	.word	0x080060a9
 8006080:	080060bf 	.word	0x080060bf
 8006084:	080060af 	.word	0x080060af
 8006088:	080060bf 	.word	0x080060bf
 800608c:	080060bf 	.word	0x080060bf
 8006090:	080060bf 	.word	0x080060bf
 8006094:	080060b7 	.word	0x080060b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006098:	f7fd fd62 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 800609c:	61f8      	str	r0, [r7, #28]
        break;
 800609e:	e014      	b.n	80060ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a0:	f7fd fd74 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 80060a4:	61f8      	str	r0, [r7, #28]
        break;
 80060a6:	e010      	b.n	80060ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <UART_SetConfig+0x56c>)
 80060aa:	61fb      	str	r3, [r7, #28]
        break;
 80060ac:	e00d      	b.n	80060ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ae:	f7fd fcbf 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80060b2:	61f8      	str	r0, [r7, #28]
        break;
 80060b4:	e009      	b.n	80060ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ba:	61fb      	str	r3, [r7, #28]
        break;
 80060bc:	e005      	b.n	80060ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060c8:	bf00      	nop
    }

    if (pclk != 0U)
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d019      	beq.n	8006104 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	085a      	lsrs	r2, r3, #1
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	441a      	add	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2b0f      	cmp	r3, #15
 80060e8:	d909      	bls.n	80060fe <UART_SetConfig+0x546>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f0:	d205      	bcs.n	80060fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60da      	str	r2, [r3, #12]
 80060fc:	e002      	b.n	8006104 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006110:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006114:	4618      	mov	r0, r3
 8006116:	3728      	adds	r7, #40	; 0x28
 8006118:	46bd      	mov	sp, r7
 800611a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800611e:	bf00      	nop
 8006120:	40008000 	.word	0x40008000
 8006124:	00f42400 	.word	0x00f42400

08006128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01a      	beq.n	800623e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006226:	d10a      	bne.n	800623e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af02      	add	r7, sp, #8
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800627c:	f7fc f8b8 	bl	80023f0 <HAL_GetTick>
 8006280:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b08      	cmp	r3, #8
 800628e:	d10e      	bne.n	80062ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f82d 	bl	80062fe <UART_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e023      	b.n	80062f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d10e      	bne.n	80062da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f817 	bl	80062fe <UART_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e00d      	b.n	80062f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b09c      	sub	sp, #112	; 0x70
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	4613      	mov	r3, r2
 800630c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630e:	e0a5      	b.n	800645c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	f000 80a1 	beq.w	800645c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631a:	f7fc f869 	bl	80023f0 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <UART_WaitOnFlagUntilTimeout+0x32>
 800632a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800632c:	2b00      	cmp	r3, #0
 800632e:	d13e      	bne.n	80063ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800633e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006344:	667b      	str	r3, [r7, #100]	; 0x64
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006350:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800635c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e6      	bne.n	8006330 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	663b      	str	r3, [r7, #96]	; 0x60
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006382:	64ba      	str	r2, [r7, #72]	; 0x48
 8006384:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e5      	bne.n	8006362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e067      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d04f      	beq.n	800645c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ca:	d147      	bne.n	800645c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
 80063f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	613b      	str	r3, [r7, #16]
   return(result);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f023 0301 	bic.w	r3, r3, #1
 800641e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006428:	623a      	str	r2, [r7, #32]
 800642a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	69f9      	ldr	r1, [r7, #28]
 800642e:	6a3a      	ldr	r2, [r7, #32]
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	61bb      	str	r3, [r7, #24]
   return(result);
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e5      	bne.n	8006408 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e010      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69da      	ldr	r2, [r3, #28]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4013      	ands	r3, r2
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	429a      	cmp	r2, r3
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	429a      	cmp	r2, r3
 8006478:	f43f af4a 	beq.w	8006310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3770      	adds	r7, #112	; 0x70
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006486:	b084      	sub	sp, #16
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	f107 001c 	add.w	r0, r7, #28
 8006494:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa6f 	bl	8006988 <USB_CoreReset>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80064ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	639a      	str	r2, [r3, #56]	; 0x38
 80064c0:	e005      	b.n	80064ce <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064da:	b004      	add	sp, #16
 80064dc:	4770      	bx	lr

080064de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d115      	bne.n	800654e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800652e:	2001      	movs	r0, #1
 8006530:	f7fb ff6a 	bl	8002408 <HAL_Delay>
      ms++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa16 	bl	800696c <USB_GetMode>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d01e      	beq.n	8006584 <USB_SetCurrentMode+0x84>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b31      	cmp	r3, #49	; 0x31
 800654a:	d9f0      	bls.n	800652e <USB_SetCurrentMode+0x2e>
 800654c:	e01a      	b.n	8006584 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d115      	bne.n	8006580 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006560:	2001      	movs	r0, #1
 8006562:	f7fb ff51 	bl	8002408 <HAL_Delay>
      ms++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f9fd 	bl	800696c <USB_GetMode>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <USB_SetCurrentMode+0x84>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b31      	cmp	r3, #49	; 0x31
 800657c:	d9f0      	bls.n	8006560 <USB_SetCurrentMode+0x60>
 800657e:	e001      	b.n	8006584 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e005      	b.n	8006590 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b32      	cmp	r3, #50	; 0x32
 8006588:	d101      	bne.n	800658e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006598:	b084      	sub	sp, #16
 800659a:	b580      	push	{r7, lr}
 800659c:	b086      	sub	sp, #24
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	e009      	b.n	80065cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	3340      	adds	r3, #64	; 0x40
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	2200      	movs	r2, #0
 80065c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3301      	adds	r3, #1
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b0e      	cmp	r3, #14
 80065d0:	d9f2      	bls.n	80065b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11c      	bne.n	8006612 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e6:	f043 0302 	orr.w	r3, r3, #2
 80065ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e005      	b.n	800661e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006624:	461a      	mov	r2, r3
 8006626:	2300      	movs	r3, #0
 8006628:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006630:	4619      	mov	r1, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006638:	461a      	mov	r2, r3
 800663a:	680b      	ldr	r3, [r1, #0]
 800663c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800663e:	2103      	movs	r1, #3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f959 	bl	80068f8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006646:	2110      	movs	r1, #16
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f8f1 	bl	8006830 <USB_FlushTxFifo>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f91d 	bl	8006898 <USB_FlushRxFifo>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666e:	461a      	mov	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	461a      	mov	r2, r3
 800667c:	2300      	movs	r3, #0
 800667e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	461a      	mov	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	e043      	b.n	800671a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a8:	d118      	bne.n	80066dc <USB_DevInit+0x144>
    {
      if (i == 0U)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066bc:	461a      	mov	r2, r3
 80066be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	e013      	b.n	80066ee <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d2:	461a      	mov	r2, r3
 80066d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e008      	b.n	80066ee <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	461a      	mov	r2, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	461a      	mov	r2, r3
 800670e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006712:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3301      	adds	r3, #1
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	429a      	cmp	r2, r3
 8006720:	d3b7      	bcc.n	8006692 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006722:	2300      	movs	r3, #0
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	e043      	b.n	80067b0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800673a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800673e:	d118      	bne.n	8006772 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	461a      	mov	r2, r3
 8006754:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e013      	b.n	8006784 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	461a      	mov	r2, r3
 800676a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	e008      	b.n	8006784 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	461a      	mov	r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	2300      	movs	r3, #0
 8006794:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	461a      	mov	r2, r3
 80067a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3301      	adds	r3, #1
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d3b7      	bcc.n	8006728 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f043 0210 	orr.w	r2, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	4b10      	ldr	r3, [pc, #64]	; (800682c <USB_DevInit+0x294>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f043 0208 	orr.w	r2, r3, #8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d107      	bne.n	800681a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006812:	f043 0304 	orr.w	r3, r3, #4
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006826:	b004      	add	sp, #16
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	803c3800 	.word	0x803c3800

08006830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a13      	ldr	r2, [pc, #76]	; (8006894 <USB_FlushTxFifo+0x64>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e01b      	b.n	8006888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	daf2      	bge.n	800683e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	019b      	lsls	r3, r3, #6
 8006860:	f043 0220 	orr.w	r2, r3, #32
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a08      	ldr	r2, [pc, #32]	; (8006894 <USB_FlushTxFifo+0x64>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e006      	b.n	8006888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b20      	cmp	r3, #32
 8006884:	d0f0      	beq.n	8006868 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	00030d40 	.word	0x00030d40

08006898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4a11      	ldr	r2, [pc, #68]	; (80068f4 <USB_FlushRxFifo+0x5c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e018      	b.n	80068e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	daf2      	bge.n	80068a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2210      	movs	r2, #16
 80068c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4a08      	ldr	r2, [pc, #32]	; (80068f4 <USB_FlushRxFifo+0x5c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e006      	b.n	80068e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d0f0      	beq.n	80068c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	00030d40 	.word	0x00030d40

080068f8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006918:	4313      	orrs	r3, r2
 800691a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006944:	f023 0303 	bic.w	r3, r3, #3
 8006948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006958:	f043 0302 	orr.w	r3, r3, #2
 800695c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	f003 0301 	and.w	r3, r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a13      	ldr	r2, [pc, #76]	; (80069ec <USB_CoreReset+0x64>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e01b      	b.n	80069de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	daf2      	bge.n	8006994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f043 0201 	orr.w	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <USB_CoreReset+0x64>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e006      	b.n	80069de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d0f0      	beq.n	80069be <USB_CoreReset+0x36>

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	00030d40 	.word	0x00030d40

080069f0 <_ZdlPvj>:
 80069f0:	f000 b803 	b.w	80069fa <_ZdlPv>

080069f4 <__cxa_pure_virtual>:
 80069f4:	b508      	push	{r3, lr}
 80069f6:	f000 f80f 	bl	8006a18 <_ZSt9terminatev>

080069fa <_ZdlPv>:
 80069fa:	f000 b84b 	b.w	8006a94 <free>

080069fe <_ZN10__cxxabiv111__terminateEPFvvE>:
 80069fe:	b508      	push	{r3, lr}
 8006a00:	4780      	blx	r0
 8006a02:	f000 f80e 	bl	8006a22 <abort>
	...

08006a08 <_ZSt13get_terminatev>:
 8006a08:	4b02      	ldr	r3, [pc, #8]	; (8006a14 <_ZSt13get_terminatev+0xc>)
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	f3bf 8f5b 	dmb	ish
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000001c 	.word	0x2000001c

08006a18 <_ZSt9terminatev>:
 8006a18:	b508      	push	{r3, lr}
 8006a1a:	f7ff fff5 	bl	8006a08 <_ZSt13get_terminatev>
 8006a1e:	f7ff ffee 	bl	80069fe <_ZN10__cxxabiv111__terminateEPFvvE>

08006a22 <abort>:
 8006a22:	b508      	push	{r3, lr}
 8006a24:	2006      	movs	r0, #6
 8006a26:	f000 f9a9 	bl	8006d7c <raise>
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	f7fb fb8e 	bl	800214c <_exit>

08006a30 <__errno>:
 8006a30:	4b01      	ldr	r3, [pc, #4]	; (8006a38 <__errno+0x8>)
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000020 	.word	0x20000020

08006a3c <__libc_init_array>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	4d0d      	ldr	r5, [pc, #52]	; (8006a74 <__libc_init_array+0x38>)
 8006a40:	4c0d      	ldr	r4, [pc, #52]	; (8006a78 <__libc_init_array+0x3c>)
 8006a42:	1b64      	subs	r4, r4, r5
 8006a44:	10a4      	asrs	r4, r4, #2
 8006a46:	2600      	movs	r6, #0
 8006a48:	42a6      	cmp	r6, r4
 8006a4a:	d109      	bne.n	8006a60 <__libc_init_array+0x24>
 8006a4c:	4d0b      	ldr	r5, [pc, #44]	; (8006a7c <__libc_init_array+0x40>)
 8006a4e:	4c0c      	ldr	r4, [pc, #48]	; (8006a80 <__libc_init_array+0x44>)
 8006a50:	f001 f866 	bl	8007b20 <_init>
 8006a54:	1b64      	subs	r4, r4, r5
 8006a56:	10a4      	asrs	r4, r4, #2
 8006a58:	2600      	movs	r6, #0
 8006a5a:	42a6      	cmp	r6, r4
 8006a5c:	d105      	bne.n	8006a6a <__libc_init_array+0x2e>
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a64:	4798      	blx	r3
 8006a66:	3601      	adds	r6, #1
 8006a68:	e7ee      	b.n	8006a48 <__libc_init_array+0xc>
 8006a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a6e:	4798      	blx	r3
 8006a70:	3601      	adds	r6, #1
 8006a72:	e7f2      	b.n	8006a5a <__libc_init_array+0x1e>
 8006a74:	08007e04 	.word	0x08007e04
 8006a78:	08007e04 	.word	0x08007e04
 8006a7c:	08007e04 	.word	0x08007e04
 8006a80:	08007e0c 	.word	0x08007e0c

08006a84 <malloc>:
 8006a84:	4b02      	ldr	r3, [pc, #8]	; (8006a90 <malloc+0xc>)
 8006a86:	4601      	mov	r1, r0
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	f000 b88d 	b.w	8006ba8 <_malloc_r>
 8006a8e:	bf00      	nop
 8006a90:	20000020 	.word	0x20000020

08006a94 <free>:
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <free+0xc>)
 8006a96:	4601      	mov	r1, r0
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	f000 b819 	b.w	8006ad0 <_free_r>
 8006a9e:	bf00      	nop
 8006aa0:	20000020 	.word	0x20000020

08006aa4 <memcpy>:
 8006aa4:	440a      	add	r2, r1
 8006aa6:	4291      	cmp	r1, r2
 8006aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aac:	d100      	bne.n	8006ab0 <memcpy+0xc>
 8006aae:	4770      	bx	lr
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aba:	4291      	cmp	r1, r2
 8006abc:	d1f9      	bne.n	8006ab2 <memcpy+0xe>
 8006abe:	bd10      	pop	{r4, pc}

08006ac0 <memset>:
 8006ac0:	4402      	add	r2, r0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d100      	bne.n	8006aca <memset+0xa>
 8006ac8:	4770      	bx	lr
 8006aca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ace:	e7f9      	b.n	8006ac4 <memset+0x4>

08006ad0 <_free_r>:
 8006ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ad2:	2900      	cmp	r1, #0
 8006ad4:	d044      	beq.n	8006b60 <_free_r+0x90>
 8006ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ada:	9001      	str	r0, [sp, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f1a1 0404 	sub.w	r4, r1, #4
 8006ae2:	bfb8      	it	lt
 8006ae4:	18e4      	addlt	r4, r4, r3
 8006ae6:	f000 f995 	bl	8006e14 <__malloc_lock>
 8006aea:	4a1e      	ldr	r2, [pc, #120]	; (8006b64 <_free_r+0x94>)
 8006aec:	9801      	ldr	r0, [sp, #4]
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	b933      	cbnz	r3, 8006b00 <_free_r+0x30>
 8006af2:	6063      	str	r3, [r4, #4]
 8006af4:	6014      	str	r4, [r2, #0]
 8006af6:	b003      	add	sp, #12
 8006af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006afc:	f000 b990 	b.w	8006e20 <__malloc_unlock>
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d908      	bls.n	8006b16 <_free_r+0x46>
 8006b04:	6825      	ldr	r5, [r4, #0]
 8006b06:	1961      	adds	r1, r4, r5
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	bf01      	itttt	eq
 8006b0c:	6819      	ldreq	r1, [r3, #0]
 8006b0e:	685b      	ldreq	r3, [r3, #4]
 8006b10:	1949      	addeq	r1, r1, r5
 8006b12:	6021      	streq	r1, [r4, #0]
 8006b14:	e7ed      	b.n	8006af2 <_free_r+0x22>
 8006b16:	461a      	mov	r2, r3
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	b10b      	cbz	r3, 8006b20 <_free_r+0x50>
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d9fa      	bls.n	8006b16 <_free_r+0x46>
 8006b20:	6811      	ldr	r1, [r2, #0]
 8006b22:	1855      	adds	r5, r2, r1
 8006b24:	42a5      	cmp	r5, r4
 8006b26:	d10b      	bne.n	8006b40 <_free_r+0x70>
 8006b28:	6824      	ldr	r4, [r4, #0]
 8006b2a:	4421      	add	r1, r4
 8006b2c:	1854      	adds	r4, r2, r1
 8006b2e:	42a3      	cmp	r3, r4
 8006b30:	6011      	str	r1, [r2, #0]
 8006b32:	d1e0      	bne.n	8006af6 <_free_r+0x26>
 8006b34:	681c      	ldr	r4, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	6053      	str	r3, [r2, #4]
 8006b3a:	4421      	add	r1, r4
 8006b3c:	6011      	str	r1, [r2, #0]
 8006b3e:	e7da      	b.n	8006af6 <_free_r+0x26>
 8006b40:	d902      	bls.n	8006b48 <_free_r+0x78>
 8006b42:	230c      	movs	r3, #12
 8006b44:	6003      	str	r3, [r0, #0]
 8006b46:	e7d6      	b.n	8006af6 <_free_r+0x26>
 8006b48:	6825      	ldr	r5, [r4, #0]
 8006b4a:	1961      	adds	r1, r4, r5
 8006b4c:	428b      	cmp	r3, r1
 8006b4e:	bf04      	itt	eq
 8006b50:	6819      	ldreq	r1, [r3, #0]
 8006b52:	685b      	ldreq	r3, [r3, #4]
 8006b54:	6063      	str	r3, [r4, #4]
 8006b56:	bf04      	itt	eq
 8006b58:	1949      	addeq	r1, r1, r5
 8006b5a:	6021      	streq	r1, [r4, #0]
 8006b5c:	6054      	str	r4, [r2, #4]
 8006b5e:	e7ca      	b.n	8006af6 <_free_r+0x26>
 8006b60:	b003      	add	sp, #12
 8006b62:	bd30      	pop	{r4, r5, pc}
 8006b64:	20000830 	.word	0x20000830

08006b68 <sbrk_aligned>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4e0e      	ldr	r6, [pc, #56]	; (8006ba4 <sbrk_aligned+0x3c>)
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	6831      	ldr	r1, [r6, #0]
 8006b70:	4605      	mov	r5, r0
 8006b72:	b911      	cbnz	r1, 8006b7a <sbrk_aligned+0x12>
 8006b74:	f000 f8ca 	bl	8006d0c <_sbrk_r>
 8006b78:	6030      	str	r0, [r6, #0]
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f8c5 	bl	8006d0c <_sbrk_r>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d00a      	beq.n	8006b9c <sbrk_aligned+0x34>
 8006b86:	1cc4      	adds	r4, r0, #3
 8006b88:	f024 0403 	bic.w	r4, r4, #3
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d007      	beq.n	8006ba0 <sbrk_aligned+0x38>
 8006b90:	1a21      	subs	r1, r4, r0
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 f8ba 	bl	8006d0c <_sbrk_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d101      	bne.n	8006ba0 <sbrk_aligned+0x38>
 8006b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	20000834 	.word	0x20000834

08006ba8 <_malloc_r>:
 8006ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	1ccd      	adds	r5, r1, #3
 8006bae:	f025 0503 	bic.w	r5, r5, #3
 8006bb2:	3508      	adds	r5, #8
 8006bb4:	2d0c      	cmp	r5, #12
 8006bb6:	bf38      	it	cc
 8006bb8:	250c      	movcc	r5, #12
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	db01      	blt.n	8006bc4 <_malloc_r+0x1c>
 8006bc0:	42a9      	cmp	r1, r5
 8006bc2:	d905      	bls.n	8006bd0 <_malloc_r+0x28>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	2600      	movs	r6, #0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd0:	4e2e      	ldr	r6, [pc, #184]	; (8006c8c <_malloc_r+0xe4>)
 8006bd2:	f000 f91f 	bl	8006e14 <__malloc_lock>
 8006bd6:	6833      	ldr	r3, [r6, #0]
 8006bd8:	461c      	mov	r4, r3
 8006bda:	bb34      	cbnz	r4, 8006c2a <_malloc_r+0x82>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4638      	mov	r0, r7
 8006be0:	f7ff ffc2 	bl	8006b68 <sbrk_aligned>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	4604      	mov	r4, r0
 8006be8:	d14d      	bne.n	8006c86 <_malloc_r+0xde>
 8006bea:	6834      	ldr	r4, [r6, #0]
 8006bec:	4626      	mov	r6, r4
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d140      	bne.n	8006c74 <_malloc_r+0xcc>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	eb04 0803 	add.w	r8, r4, r3
 8006bfc:	f000 f886 	bl	8006d0c <_sbrk_r>
 8006c00:	4580      	cmp	r8, r0
 8006c02:	d13a      	bne.n	8006c7a <_malloc_r+0xd2>
 8006c04:	6821      	ldr	r1, [r4, #0]
 8006c06:	3503      	adds	r5, #3
 8006c08:	1a6d      	subs	r5, r5, r1
 8006c0a:	f025 0503 	bic.w	r5, r5, #3
 8006c0e:	3508      	adds	r5, #8
 8006c10:	2d0c      	cmp	r5, #12
 8006c12:	bf38      	it	cc
 8006c14:	250c      	movcc	r5, #12
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ffa5 	bl	8006b68 <sbrk_aligned>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d02b      	beq.n	8006c7a <_malloc_r+0xd2>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	442b      	add	r3, r5
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	e00e      	b.n	8006c48 <_malloc_r+0xa0>
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	1b52      	subs	r2, r2, r5
 8006c2e:	d41e      	bmi.n	8006c6e <_malloc_r+0xc6>
 8006c30:	2a0b      	cmp	r2, #11
 8006c32:	d916      	bls.n	8006c62 <_malloc_r+0xba>
 8006c34:	1961      	adds	r1, r4, r5
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	6025      	str	r5, [r4, #0]
 8006c3a:	bf18      	it	ne
 8006c3c:	6059      	strne	r1, [r3, #4]
 8006c3e:	6863      	ldr	r3, [r4, #4]
 8006c40:	bf08      	it	eq
 8006c42:	6031      	streq	r1, [r6, #0]
 8006c44:	5162      	str	r2, [r4, r5]
 8006c46:	604b      	str	r3, [r1, #4]
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f104 060b 	add.w	r6, r4, #11
 8006c4e:	f000 f8e7 	bl	8006e20 <__malloc_unlock>
 8006c52:	f026 0607 	bic.w	r6, r6, #7
 8006c56:	1d23      	adds	r3, r4, #4
 8006c58:	1af2      	subs	r2, r6, r3
 8006c5a:	d0b6      	beq.n	8006bca <_malloc_r+0x22>
 8006c5c:	1b9b      	subs	r3, r3, r6
 8006c5e:	50a3      	str	r3, [r4, r2]
 8006c60:	e7b3      	b.n	8006bca <_malloc_r+0x22>
 8006c62:	6862      	ldr	r2, [r4, #4]
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	bf0c      	ite	eq
 8006c68:	6032      	streq	r2, [r6, #0]
 8006c6a:	605a      	strne	r2, [r3, #4]
 8006c6c:	e7ec      	b.n	8006c48 <_malloc_r+0xa0>
 8006c6e:	4623      	mov	r3, r4
 8006c70:	6864      	ldr	r4, [r4, #4]
 8006c72:	e7b2      	b.n	8006bda <_malloc_r+0x32>
 8006c74:	4634      	mov	r4, r6
 8006c76:	6876      	ldr	r6, [r6, #4]
 8006c78:	e7b9      	b.n	8006bee <_malloc_r+0x46>
 8006c7a:	230c      	movs	r3, #12
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f000 f8ce 	bl	8006e20 <__malloc_unlock>
 8006c84:	e7a1      	b.n	8006bca <_malloc_r+0x22>
 8006c86:	6025      	str	r5, [r4, #0]
 8006c88:	e7de      	b.n	8006c48 <_malloc_r+0xa0>
 8006c8a:	bf00      	nop
 8006c8c:	20000830 	.word	0x20000830

08006c90 <rand>:
 8006c90:	4b16      	ldr	r3, [pc, #88]	; (8006cec <rand+0x5c>)
 8006c92:	b510      	push	{r4, lr}
 8006c94:	681c      	ldr	r4, [r3, #0]
 8006c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c98:	b9b3      	cbnz	r3, 8006cc8 <rand+0x38>
 8006c9a:	2018      	movs	r0, #24
 8006c9c:	f7ff fef2 	bl	8006a84 <malloc>
 8006ca0:	63a0      	str	r0, [r4, #56]	; 0x38
 8006ca2:	b928      	cbnz	r0, 8006cb0 <rand+0x20>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	4b12      	ldr	r3, [pc, #72]	; (8006cf0 <rand+0x60>)
 8006ca8:	4812      	ldr	r0, [pc, #72]	; (8006cf4 <rand+0x64>)
 8006caa:	214e      	movs	r1, #78	; 0x4e
 8006cac:	f000 f882 	bl	8006db4 <__assert_func>
 8006cb0:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <rand+0x68>)
 8006cb2:	4b12      	ldr	r3, [pc, #72]	; (8006cfc <rand+0x6c>)
 8006cb4:	e9c0 2300 	strd	r2, r3, [r0]
 8006cb8:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <rand+0x70>)
 8006cba:	6083      	str	r3, [r0, #8]
 8006cbc:	230b      	movs	r3, #11
 8006cbe:	8183      	strh	r3, [r0, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006cc8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006cca:	4a0e      	ldr	r2, [pc, #56]	; (8006d04 <rand+0x74>)
 8006ccc:	6920      	ldr	r0, [r4, #16]
 8006cce:	6963      	ldr	r3, [r4, #20]
 8006cd0:	490d      	ldr	r1, [pc, #52]	; (8006d08 <rand+0x78>)
 8006cd2:	4342      	muls	r2, r0
 8006cd4:	fb01 2203 	mla	r2, r1, r3, r2
 8006cd8:	fba0 0101 	umull	r0, r1, r0, r1
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	eb42 0001 	adc.w	r0, r2, r1
 8006ce2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006ce6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006cea:	bd10      	pop	{r4, pc}
 8006cec:	20000020 	.word	0x20000020
 8006cf0:	08007cb8 	.word	0x08007cb8
 8006cf4:	08007ccf 	.word	0x08007ccf
 8006cf8:	abcd330e 	.word	0xabcd330e
 8006cfc:	e66d1234 	.word	0xe66d1234
 8006d00:	0005deec 	.word	0x0005deec
 8006d04:	5851f42d 	.word	0x5851f42d
 8006d08:	4c957f2d 	.word	0x4c957f2d

08006d0c <_sbrk_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d06      	ldr	r5, [pc, #24]	; (8006d28 <_sbrk_r+0x1c>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fb fa90 	bl	800223c <_sbrk>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_sbrk_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_sbrk_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20000838 	.word	0x20000838

08006d2c <_raise_r>:
 8006d2c:	291f      	cmp	r1, #31
 8006d2e:	b538      	push	{r3, r4, r5, lr}
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	d904      	bls.n	8006d40 <_raise_r+0x14>
 8006d36:	2316      	movs	r3, #22
 8006d38:	6003      	str	r3, [r0, #0]
 8006d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d42:	b112      	cbz	r2, 8006d4a <_raise_r+0x1e>
 8006d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d48:	b94b      	cbnz	r3, 8006d5e <_raise_r+0x32>
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 f830 	bl	8006db0 <_getpid_r>
 8006d50:	462a      	mov	r2, r5
 8006d52:	4601      	mov	r1, r0
 8006d54:	4620      	mov	r0, r4
 8006d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d5a:	f000 b817 	b.w	8006d8c <_kill_r>
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d00a      	beq.n	8006d78 <_raise_r+0x4c>
 8006d62:	1c59      	adds	r1, r3, #1
 8006d64:	d103      	bne.n	8006d6e <_raise_r+0x42>
 8006d66:	2316      	movs	r3, #22
 8006d68:	6003      	str	r3, [r0, #0]
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	e7e7      	b.n	8006d3e <_raise_r+0x12>
 8006d6e:	2400      	movs	r4, #0
 8006d70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d74:	4628      	mov	r0, r5
 8006d76:	4798      	blx	r3
 8006d78:	2000      	movs	r0, #0
 8006d7a:	e7e0      	b.n	8006d3e <_raise_r+0x12>

08006d7c <raise>:
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <raise+0xc>)
 8006d7e:	4601      	mov	r1, r0
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	f7ff bfd3 	b.w	8006d2c <_raise_r>
 8006d86:	bf00      	nop
 8006d88:	20000020 	.word	0x20000020

08006d8c <_kill_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d07      	ldr	r5, [pc, #28]	; (8006dac <_kill_r+0x20>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	602b      	str	r3, [r5, #0]
 8006d9a:	f7fb f9c7 	bl	800212c <_kill>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	d102      	bne.n	8006da8 <_kill_r+0x1c>
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	b103      	cbz	r3, 8006da8 <_kill_r+0x1c>
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	bd38      	pop	{r3, r4, r5, pc}
 8006daa:	bf00      	nop
 8006dac:	20000838 	.word	0x20000838

08006db0 <_getpid_r>:
 8006db0:	f7fb b9b4 	b.w	800211c <_getpid>

08006db4 <__assert_func>:
 8006db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006db6:	4614      	mov	r4, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <__assert_func+0x2c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	68d8      	ldr	r0, [r3, #12]
 8006dc2:	b14c      	cbz	r4, 8006dd8 <__assert_func+0x24>
 8006dc4:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <__assert_func+0x30>)
 8006dc6:	9100      	str	r1, [sp, #0]
 8006dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dcc:	4906      	ldr	r1, [pc, #24]	; (8006de8 <__assert_func+0x34>)
 8006dce:	462b      	mov	r3, r5
 8006dd0:	f000 f80e 	bl	8006df0 <fiprintf>
 8006dd4:	f7ff fe25 	bl	8006a22 <abort>
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <__assert_func+0x38>)
 8006dda:	461c      	mov	r4, r3
 8006ddc:	e7f3      	b.n	8006dc6 <__assert_func+0x12>
 8006dde:	bf00      	nop
 8006de0:	20000020 	.word	0x20000020
 8006de4:	08007d2a 	.word	0x08007d2a
 8006de8:	08007d37 	.word	0x08007d37
 8006dec:	08007d65 	.word	0x08007d65

08006df0 <fiprintf>:
 8006df0:	b40e      	push	{r1, r2, r3}
 8006df2:	b503      	push	{r0, r1, lr}
 8006df4:	4601      	mov	r1, r0
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	4805      	ldr	r0, [pc, #20]	; (8006e10 <fiprintf+0x20>)
 8006dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dfe:	6800      	ldr	r0, [r0, #0]
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	f000 f83d 	bl	8006e80 <_vfiprintf_r>
 8006e06:	b002      	add	sp, #8
 8006e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e0c:	b003      	add	sp, #12
 8006e0e:	4770      	bx	lr
 8006e10:	20000020 	.word	0x20000020

08006e14 <__malloc_lock>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__malloc_lock+0x8>)
 8006e16:	f000 bd6f 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	2000083c 	.word	0x2000083c

08006e20 <__malloc_unlock>:
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <__malloc_unlock+0x8>)
 8006e22:	f000 bd6a 	b.w	80078fa <__retarget_lock_release_recursive>
 8006e26:	bf00      	nop
 8006e28:	2000083c 	.word	0x2000083c

08006e2c <__sfputc_r>:
 8006e2c:	6893      	ldr	r3, [r2, #8]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	b410      	push	{r4}
 8006e34:	6093      	str	r3, [r2, #8]
 8006e36:	da08      	bge.n	8006e4a <__sfputc_r+0x1e>
 8006e38:	6994      	ldr	r4, [r2, #24]
 8006e3a:	42a3      	cmp	r3, r4
 8006e3c:	db01      	blt.n	8006e42 <__sfputc_r+0x16>
 8006e3e:	290a      	cmp	r1, #10
 8006e40:	d103      	bne.n	8006e4a <__sfputc_r+0x1e>
 8006e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e46:	f000 badf 	b.w	8007408 <__swbuf_r>
 8006e4a:	6813      	ldr	r3, [r2, #0]
 8006e4c:	1c58      	adds	r0, r3, #1
 8006e4e:	6010      	str	r0, [r2, #0]
 8006e50:	7019      	strb	r1, [r3, #0]
 8006e52:	4608      	mov	r0, r1
 8006e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <__sfputs_r>:
 8006e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	460f      	mov	r7, r1
 8006e60:	4614      	mov	r4, r2
 8006e62:	18d5      	adds	r5, r2, r3
 8006e64:	42ac      	cmp	r4, r5
 8006e66:	d101      	bne.n	8006e6c <__sfputs_r+0x12>
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e007      	b.n	8006e7c <__sfputs_r+0x22>
 8006e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e70:	463a      	mov	r2, r7
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ffda 	bl	8006e2c <__sfputc_r>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d1f3      	bne.n	8006e64 <__sfputs_r+0xa>
 8006e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e80 <_vfiprintf_r>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	460d      	mov	r5, r1
 8006e86:	b09d      	sub	sp, #116	; 0x74
 8006e88:	4614      	mov	r4, r2
 8006e8a:	4698      	mov	r8, r3
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	b118      	cbz	r0, 8006e98 <_vfiprintf_r+0x18>
 8006e90:	6983      	ldr	r3, [r0, #24]
 8006e92:	b90b      	cbnz	r3, 8006e98 <_vfiprintf_r+0x18>
 8006e94:	f000 fc92 	bl	80077bc <__sinit>
 8006e98:	4b89      	ldr	r3, [pc, #548]	; (80070c0 <_vfiprintf_r+0x240>)
 8006e9a:	429d      	cmp	r5, r3
 8006e9c:	d11b      	bne.n	8006ed6 <_vfiprintf_r+0x56>
 8006e9e:	6875      	ldr	r5, [r6, #4]
 8006ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ea2:	07d9      	lsls	r1, r3, #31
 8006ea4:	d405      	bmi.n	8006eb2 <_vfiprintf_r+0x32>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	059a      	lsls	r2, r3, #22
 8006eaa:	d402      	bmi.n	8006eb2 <_vfiprintf_r+0x32>
 8006eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eae:	f000 fd23 	bl	80078f8 <__retarget_lock_acquire_recursive>
 8006eb2:	89ab      	ldrh	r3, [r5, #12]
 8006eb4:	071b      	lsls	r3, r3, #28
 8006eb6:	d501      	bpl.n	8006ebc <_vfiprintf_r+0x3c>
 8006eb8:	692b      	ldr	r3, [r5, #16]
 8006eba:	b9eb      	cbnz	r3, 8006ef8 <_vfiprintf_r+0x78>
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 faf4 	bl	80074ac <__swsetup_r>
 8006ec4:	b1c0      	cbz	r0, 8006ef8 <_vfiprintf_r+0x78>
 8006ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ec8:	07dc      	lsls	r4, r3, #31
 8006eca:	d50e      	bpl.n	8006eea <_vfiprintf_r+0x6a>
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	b01d      	add	sp, #116	; 0x74
 8006ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed6:	4b7b      	ldr	r3, [pc, #492]	; (80070c4 <_vfiprintf_r+0x244>)
 8006ed8:	429d      	cmp	r5, r3
 8006eda:	d101      	bne.n	8006ee0 <_vfiprintf_r+0x60>
 8006edc:	68b5      	ldr	r5, [r6, #8]
 8006ede:	e7df      	b.n	8006ea0 <_vfiprintf_r+0x20>
 8006ee0:	4b79      	ldr	r3, [pc, #484]	; (80070c8 <_vfiprintf_r+0x248>)
 8006ee2:	429d      	cmp	r5, r3
 8006ee4:	bf08      	it	eq
 8006ee6:	68f5      	ldreq	r5, [r6, #12]
 8006ee8:	e7da      	b.n	8006ea0 <_vfiprintf_r+0x20>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	0598      	lsls	r0, r3, #22
 8006eee:	d4ed      	bmi.n	8006ecc <_vfiprintf_r+0x4c>
 8006ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ef2:	f000 fd02 	bl	80078fa <__retarget_lock_release_recursive>
 8006ef6:	e7e9      	b.n	8006ecc <_vfiprintf_r+0x4c>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9309      	str	r3, [sp, #36]	; 0x24
 8006efc:	2320      	movs	r3, #32
 8006efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f06:	2330      	movs	r3, #48	; 0x30
 8006f08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070cc <_vfiprintf_r+0x24c>
 8006f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f10:	f04f 0901 	mov.w	r9, #1
 8006f14:	4623      	mov	r3, r4
 8006f16:	469a      	mov	sl, r3
 8006f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f1c:	b10a      	cbz	r2, 8006f22 <_vfiprintf_r+0xa2>
 8006f1e:	2a25      	cmp	r2, #37	; 0x25
 8006f20:	d1f9      	bne.n	8006f16 <_vfiprintf_r+0x96>
 8006f22:	ebba 0b04 	subs.w	fp, sl, r4
 8006f26:	d00b      	beq.n	8006f40 <_vfiprintf_r+0xc0>
 8006f28:	465b      	mov	r3, fp
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f7ff ff93 	bl	8006e5a <__sfputs_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	f000 80aa 	beq.w	800708e <_vfiprintf_r+0x20e>
 8006f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f3c:	445a      	add	r2, fp
 8006f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f40:	f89a 3000 	ldrb.w	r3, [sl]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80a2 	beq.w	800708e <_vfiprintf_r+0x20e>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f54:	f10a 0a01 	add.w	sl, sl, #1
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	9307      	str	r3, [sp, #28]
 8006f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f60:	931a      	str	r3, [sp, #104]	; 0x68
 8006f62:	4654      	mov	r4, sl
 8006f64:	2205      	movs	r2, #5
 8006f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6a:	4858      	ldr	r0, [pc, #352]	; (80070cc <_vfiprintf_r+0x24c>)
 8006f6c:	f7f9 f948 	bl	8000200 <memchr>
 8006f70:	9a04      	ldr	r2, [sp, #16]
 8006f72:	b9d8      	cbnz	r0, 8006fac <_vfiprintf_r+0x12c>
 8006f74:	06d1      	lsls	r1, r2, #27
 8006f76:	bf44      	itt	mi
 8006f78:	2320      	movmi	r3, #32
 8006f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f7e:	0713      	lsls	r3, r2, #28
 8006f80:	bf44      	itt	mi
 8006f82:	232b      	movmi	r3, #43	; 0x2b
 8006f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f88:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f8e:	d015      	beq.n	8006fbc <_vfiprintf_r+0x13c>
 8006f90:	9a07      	ldr	r2, [sp, #28]
 8006f92:	4654      	mov	r4, sl
 8006f94:	2000      	movs	r0, #0
 8006f96:	f04f 0c0a 	mov.w	ip, #10
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fa0:	3b30      	subs	r3, #48	; 0x30
 8006fa2:	2b09      	cmp	r3, #9
 8006fa4:	d94e      	bls.n	8007044 <_vfiprintf_r+0x1c4>
 8006fa6:	b1b0      	cbz	r0, 8006fd6 <_vfiprintf_r+0x156>
 8006fa8:	9207      	str	r2, [sp, #28]
 8006faa:	e014      	b.n	8006fd6 <_vfiprintf_r+0x156>
 8006fac:	eba0 0308 	sub.w	r3, r0, r8
 8006fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	9304      	str	r3, [sp, #16]
 8006fb8:	46a2      	mov	sl, r4
 8006fba:	e7d2      	b.n	8006f62 <_vfiprintf_r+0xe2>
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	1d19      	adds	r1, r3, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	9103      	str	r1, [sp, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfbb      	ittet	lt
 8006fc8:	425b      	neglt	r3, r3
 8006fca:	f042 0202 	orrlt.w	r2, r2, #2
 8006fce:	9307      	strge	r3, [sp, #28]
 8006fd0:	9307      	strlt	r3, [sp, #28]
 8006fd2:	bfb8      	it	lt
 8006fd4:	9204      	strlt	r2, [sp, #16]
 8006fd6:	7823      	ldrb	r3, [r4, #0]
 8006fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8006fda:	d10c      	bne.n	8006ff6 <_vfiprintf_r+0x176>
 8006fdc:	7863      	ldrb	r3, [r4, #1]
 8006fde:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe0:	d135      	bne.n	800704e <_vfiprintf_r+0x1ce>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	1d1a      	adds	r2, r3, #4
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	9203      	str	r2, [sp, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bfb8      	it	lt
 8006fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ff2:	3402      	adds	r4, #2
 8006ff4:	9305      	str	r3, [sp, #20]
 8006ff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80070dc <_vfiprintf_r+0x25c>
 8006ffa:	7821      	ldrb	r1, [r4, #0]
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	4650      	mov	r0, sl
 8007000:	f7f9 f8fe 	bl	8000200 <memchr>
 8007004:	b140      	cbz	r0, 8007018 <_vfiprintf_r+0x198>
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	eba0 000a 	sub.w	r0, r0, sl
 800700c:	fa03 f000 	lsl.w	r0, r3, r0
 8007010:	9b04      	ldr	r3, [sp, #16]
 8007012:	4303      	orrs	r3, r0
 8007014:	3401      	adds	r4, #1
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701c:	482c      	ldr	r0, [pc, #176]	; (80070d0 <_vfiprintf_r+0x250>)
 800701e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007022:	2206      	movs	r2, #6
 8007024:	f7f9 f8ec 	bl	8000200 <memchr>
 8007028:	2800      	cmp	r0, #0
 800702a:	d03f      	beq.n	80070ac <_vfiprintf_r+0x22c>
 800702c:	4b29      	ldr	r3, [pc, #164]	; (80070d4 <_vfiprintf_r+0x254>)
 800702e:	bb1b      	cbnz	r3, 8007078 <_vfiprintf_r+0x1f8>
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	3307      	adds	r3, #7
 8007034:	f023 0307 	bic.w	r3, r3, #7
 8007038:	3308      	adds	r3, #8
 800703a:	9303      	str	r3, [sp, #12]
 800703c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703e:	443b      	add	r3, r7
 8007040:	9309      	str	r3, [sp, #36]	; 0x24
 8007042:	e767      	b.n	8006f14 <_vfiprintf_r+0x94>
 8007044:	fb0c 3202 	mla	r2, ip, r2, r3
 8007048:	460c      	mov	r4, r1
 800704a:	2001      	movs	r0, #1
 800704c:	e7a5      	b.n	8006f9a <_vfiprintf_r+0x11a>
 800704e:	2300      	movs	r3, #0
 8007050:	3401      	adds	r4, #1
 8007052:	9305      	str	r3, [sp, #20]
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 0c0a 	mov.w	ip, #10
 800705a:	4620      	mov	r0, r4
 800705c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007060:	3a30      	subs	r2, #48	; 0x30
 8007062:	2a09      	cmp	r2, #9
 8007064:	d903      	bls.n	800706e <_vfiprintf_r+0x1ee>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0c5      	beq.n	8006ff6 <_vfiprintf_r+0x176>
 800706a:	9105      	str	r1, [sp, #20]
 800706c:	e7c3      	b.n	8006ff6 <_vfiprintf_r+0x176>
 800706e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007072:	4604      	mov	r4, r0
 8007074:	2301      	movs	r3, #1
 8007076:	e7f0      	b.n	800705a <_vfiprintf_r+0x1da>
 8007078:	ab03      	add	r3, sp, #12
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	462a      	mov	r2, r5
 800707e:	4b16      	ldr	r3, [pc, #88]	; (80070d8 <_vfiprintf_r+0x258>)
 8007080:	a904      	add	r1, sp, #16
 8007082:	4630      	mov	r0, r6
 8007084:	f3af 8000 	nop.w
 8007088:	4607      	mov	r7, r0
 800708a:	1c78      	adds	r0, r7, #1
 800708c:	d1d6      	bne.n	800703c <_vfiprintf_r+0x1bc>
 800708e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007090:	07d9      	lsls	r1, r3, #31
 8007092:	d405      	bmi.n	80070a0 <_vfiprintf_r+0x220>
 8007094:	89ab      	ldrh	r3, [r5, #12]
 8007096:	059a      	lsls	r2, r3, #22
 8007098:	d402      	bmi.n	80070a0 <_vfiprintf_r+0x220>
 800709a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800709c:	f000 fc2d 	bl	80078fa <__retarget_lock_release_recursive>
 80070a0:	89ab      	ldrh	r3, [r5, #12]
 80070a2:	065b      	lsls	r3, r3, #25
 80070a4:	f53f af12 	bmi.w	8006ecc <_vfiprintf_r+0x4c>
 80070a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070aa:	e711      	b.n	8006ed0 <_vfiprintf_r+0x50>
 80070ac:	ab03      	add	r3, sp, #12
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	462a      	mov	r2, r5
 80070b2:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <_vfiprintf_r+0x258>)
 80070b4:	a904      	add	r1, sp, #16
 80070b6:	4630      	mov	r0, r6
 80070b8:	f000 f880 	bl	80071bc <_printf_i>
 80070bc:	e7e4      	b.n	8007088 <_vfiprintf_r+0x208>
 80070be:	bf00      	nop
 80070c0:	08007dbc 	.word	0x08007dbc
 80070c4:	08007ddc 	.word	0x08007ddc
 80070c8:	08007d9c 	.word	0x08007d9c
 80070cc:	08007d66 	.word	0x08007d66
 80070d0:	08007d70 	.word	0x08007d70
 80070d4:	00000000 	.word	0x00000000
 80070d8:	08006e5b 	.word	0x08006e5b
 80070dc:	08007d6c 	.word	0x08007d6c

080070e0 <_printf_common>:
 80070e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	4616      	mov	r6, r2
 80070e6:	4699      	mov	r9, r3
 80070e8:	688a      	ldr	r2, [r1, #8]
 80070ea:	690b      	ldr	r3, [r1, #16]
 80070ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070f0:	4293      	cmp	r3, r2
 80070f2:	bfb8      	it	lt
 80070f4:	4613      	movlt	r3, r2
 80070f6:	6033      	str	r3, [r6, #0]
 80070f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070fc:	4607      	mov	r7, r0
 80070fe:	460c      	mov	r4, r1
 8007100:	b10a      	cbz	r2, 8007106 <_printf_common+0x26>
 8007102:	3301      	adds	r3, #1
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	0699      	lsls	r1, r3, #26
 800710a:	bf42      	ittt	mi
 800710c:	6833      	ldrmi	r3, [r6, #0]
 800710e:	3302      	addmi	r3, #2
 8007110:	6033      	strmi	r3, [r6, #0]
 8007112:	6825      	ldr	r5, [r4, #0]
 8007114:	f015 0506 	ands.w	r5, r5, #6
 8007118:	d106      	bne.n	8007128 <_printf_common+0x48>
 800711a:	f104 0a19 	add.w	sl, r4, #25
 800711e:	68e3      	ldr	r3, [r4, #12]
 8007120:	6832      	ldr	r2, [r6, #0]
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	42ab      	cmp	r3, r5
 8007126:	dc26      	bgt.n	8007176 <_printf_common+0x96>
 8007128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800712c:	1e13      	subs	r3, r2, #0
 800712e:	6822      	ldr	r2, [r4, #0]
 8007130:	bf18      	it	ne
 8007132:	2301      	movne	r3, #1
 8007134:	0692      	lsls	r2, r2, #26
 8007136:	d42b      	bmi.n	8007190 <_printf_common+0xb0>
 8007138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800713c:	4649      	mov	r1, r9
 800713e:	4638      	mov	r0, r7
 8007140:	47c0      	blx	r8
 8007142:	3001      	adds	r0, #1
 8007144:	d01e      	beq.n	8007184 <_printf_common+0xa4>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	68e5      	ldr	r5, [r4, #12]
 800714a:	6832      	ldr	r2, [r6, #0]
 800714c:	f003 0306 	and.w	r3, r3, #6
 8007150:	2b04      	cmp	r3, #4
 8007152:	bf08      	it	eq
 8007154:	1aad      	subeq	r5, r5, r2
 8007156:	68a3      	ldr	r3, [r4, #8]
 8007158:	6922      	ldr	r2, [r4, #16]
 800715a:	bf0c      	ite	eq
 800715c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007160:	2500      	movne	r5, #0
 8007162:	4293      	cmp	r3, r2
 8007164:	bfc4      	itt	gt
 8007166:	1a9b      	subgt	r3, r3, r2
 8007168:	18ed      	addgt	r5, r5, r3
 800716a:	2600      	movs	r6, #0
 800716c:	341a      	adds	r4, #26
 800716e:	42b5      	cmp	r5, r6
 8007170:	d11a      	bne.n	80071a8 <_printf_common+0xc8>
 8007172:	2000      	movs	r0, #0
 8007174:	e008      	b.n	8007188 <_printf_common+0xa8>
 8007176:	2301      	movs	r3, #1
 8007178:	4652      	mov	r2, sl
 800717a:	4649      	mov	r1, r9
 800717c:	4638      	mov	r0, r7
 800717e:	47c0      	blx	r8
 8007180:	3001      	adds	r0, #1
 8007182:	d103      	bne.n	800718c <_printf_common+0xac>
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718c:	3501      	adds	r5, #1
 800718e:	e7c6      	b.n	800711e <_printf_common+0x3e>
 8007190:	18e1      	adds	r1, r4, r3
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	2030      	movs	r0, #48	; 0x30
 8007196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800719a:	4422      	add	r2, r4
 800719c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071a4:	3302      	adds	r3, #2
 80071a6:	e7c7      	b.n	8007138 <_printf_common+0x58>
 80071a8:	2301      	movs	r3, #1
 80071aa:	4622      	mov	r2, r4
 80071ac:	4649      	mov	r1, r9
 80071ae:	4638      	mov	r0, r7
 80071b0:	47c0      	blx	r8
 80071b2:	3001      	adds	r0, #1
 80071b4:	d0e6      	beq.n	8007184 <_printf_common+0xa4>
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7d9      	b.n	800716e <_printf_common+0x8e>
	...

080071bc <_printf_i>:
 80071bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	7e0f      	ldrb	r7, [r1, #24]
 80071c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071c4:	2f78      	cmp	r7, #120	; 0x78
 80071c6:	4691      	mov	r9, r2
 80071c8:	4680      	mov	r8, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	469a      	mov	sl, r3
 80071ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071d2:	d807      	bhi.n	80071e4 <_printf_i+0x28>
 80071d4:	2f62      	cmp	r7, #98	; 0x62
 80071d6:	d80a      	bhi.n	80071ee <_printf_i+0x32>
 80071d8:	2f00      	cmp	r7, #0
 80071da:	f000 80d8 	beq.w	800738e <_printf_i+0x1d2>
 80071de:	2f58      	cmp	r7, #88	; 0x58
 80071e0:	f000 80a3 	beq.w	800732a <_printf_i+0x16e>
 80071e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071ec:	e03a      	b.n	8007264 <_printf_i+0xa8>
 80071ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071f2:	2b15      	cmp	r3, #21
 80071f4:	d8f6      	bhi.n	80071e4 <_printf_i+0x28>
 80071f6:	a101      	add	r1, pc, #4	; (adr r1, 80071fc <_printf_i+0x40>)
 80071f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071fc:	08007255 	.word	0x08007255
 8007200:	08007269 	.word	0x08007269
 8007204:	080071e5 	.word	0x080071e5
 8007208:	080071e5 	.word	0x080071e5
 800720c:	080071e5 	.word	0x080071e5
 8007210:	080071e5 	.word	0x080071e5
 8007214:	08007269 	.word	0x08007269
 8007218:	080071e5 	.word	0x080071e5
 800721c:	080071e5 	.word	0x080071e5
 8007220:	080071e5 	.word	0x080071e5
 8007224:	080071e5 	.word	0x080071e5
 8007228:	08007375 	.word	0x08007375
 800722c:	08007299 	.word	0x08007299
 8007230:	08007357 	.word	0x08007357
 8007234:	080071e5 	.word	0x080071e5
 8007238:	080071e5 	.word	0x080071e5
 800723c:	08007397 	.word	0x08007397
 8007240:	080071e5 	.word	0x080071e5
 8007244:	08007299 	.word	0x08007299
 8007248:	080071e5 	.word	0x080071e5
 800724c:	080071e5 	.word	0x080071e5
 8007250:	0800735f 	.word	0x0800735f
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	602a      	str	r2, [r5, #0]
 800725c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007264:	2301      	movs	r3, #1
 8007266:	e0a3      	b.n	80073b0 <_printf_i+0x1f4>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	6829      	ldr	r1, [r5, #0]
 800726c:	0606      	lsls	r6, r0, #24
 800726e:	f101 0304 	add.w	r3, r1, #4
 8007272:	d50a      	bpl.n	800728a <_printf_i+0xce>
 8007274:	680e      	ldr	r6, [r1, #0]
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	2e00      	cmp	r6, #0
 800727a:	da03      	bge.n	8007284 <_printf_i+0xc8>
 800727c:	232d      	movs	r3, #45	; 0x2d
 800727e:	4276      	negs	r6, r6
 8007280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007284:	485e      	ldr	r0, [pc, #376]	; (8007400 <_printf_i+0x244>)
 8007286:	230a      	movs	r3, #10
 8007288:	e019      	b.n	80072be <_printf_i+0x102>
 800728a:	680e      	ldr	r6, [r1, #0]
 800728c:	602b      	str	r3, [r5, #0]
 800728e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007292:	bf18      	it	ne
 8007294:	b236      	sxthne	r6, r6
 8007296:	e7ef      	b.n	8007278 <_printf_i+0xbc>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	6820      	ldr	r0, [r4, #0]
 800729c:	1d19      	adds	r1, r3, #4
 800729e:	6029      	str	r1, [r5, #0]
 80072a0:	0601      	lsls	r1, r0, #24
 80072a2:	d501      	bpl.n	80072a8 <_printf_i+0xec>
 80072a4:	681e      	ldr	r6, [r3, #0]
 80072a6:	e002      	b.n	80072ae <_printf_i+0xf2>
 80072a8:	0646      	lsls	r6, r0, #25
 80072aa:	d5fb      	bpl.n	80072a4 <_printf_i+0xe8>
 80072ac:	881e      	ldrh	r6, [r3, #0]
 80072ae:	4854      	ldr	r0, [pc, #336]	; (8007400 <_printf_i+0x244>)
 80072b0:	2f6f      	cmp	r7, #111	; 0x6f
 80072b2:	bf0c      	ite	eq
 80072b4:	2308      	moveq	r3, #8
 80072b6:	230a      	movne	r3, #10
 80072b8:	2100      	movs	r1, #0
 80072ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072be:	6865      	ldr	r5, [r4, #4]
 80072c0:	60a5      	str	r5, [r4, #8]
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	bfa2      	ittt	ge
 80072c6:	6821      	ldrge	r1, [r4, #0]
 80072c8:	f021 0104 	bicge.w	r1, r1, #4
 80072cc:	6021      	strge	r1, [r4, #0]
 80072ce:	b90e      	cbnz	r6, 80072d4 <_printf_i+0x118>
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	d04d      	beq.n	8007370 <_printf_i+0x1b4>
 80072d4:	4615      	mov	r5, r2
 80072d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80072da:	fb03 6711 	mls	r7, r3, r1, r6
 80072de:	5dc7      	ldrb	r7, [r0, r7]
 80072e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072e4:	4637      	mov	r7, r6
 80072e6:	42bb      	cmp	r3, r7
 80072e8:	460e      	mov	r6, r1
 80072ea:	d9f4      	bls.n	80072d6 <_printf_i+0x11a>
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d10b      	bne.n	8007308 <_printf_i+0x14c>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	07de      	lsls	r6, r3, #31
 80072f4:	d508      	bpl.n	8007308 <_printf_i+0x14c>
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	6861      	ldr	r1, [r4, #4]
 80072fa:	4299      	cmp	r1, r3
 80072fc:	bfde      	ittt	le
 80072fe:	2330      	movle	r3, #48	; 0x30
 8007300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007308:	1b52      	subs	r2, r2, r5
 800730a:	6122      	str	r2, [r4, #16]
 800730c:	f8cd a000 	str.w	sl, [sp]
 8007310:	464b      	mov	r3, r9
 8007312:	aa03      	add	r2, sp, #12
 8007314:	4621      	mov	r1, r4
 8007316:	4640      	mov	r0, r8
 8007318:	f7ff fee2 	bl	80070e0 <_printf_common>
 800731c:	3001      	adds	r0, #1
 800731e:	d14c      	bne.n	80073ba <_printf_i+0x1fe>
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	b004      	add	sp, #16
 8007326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732a:	4835      	ldr	r0, [pc, #212]	; (8007400 <_printf_i+0x244>)
 800732c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007330:	6829      	ldr	r1, [r5, #0]
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	f851 6b04 	ldr.w	r6, [r1], #4
 8007338:	6029      	str	r1, [r5, #0]
 800733a:	061d      	lsls	r5, r3, #24
 800733c:	d514      	bpl.n	8007368 <_printf_i+0x1ac>
 800733e:	07df      	lsls	r7, r3, #31
 8007340:	bf44      	itt	mi
 8007342:	f043 0320 	orrmi.w	r3, r3, #32
 8007346:	6023      	strmi	r3, [r4, #0]
 8007348:	b91e      	cbnz	r6, 8007352 <_printf_i+0x196>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	f023 0320 	bic.w	r3, r3, #32
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	2310      	movs	r3, #16
 8007354:	e7b0      	b.n	80072b8 <_printf_i+0xfc>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f043 0320 	orr.w	r3, r3, #32
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	2378      	movs	r3, #120	; 0x78
 8007360:	4828      	ldr	r0, [pc, #160]	; (8007404 <_printf_i+0x248>)
 8007362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007366:	e7e3      	b.n	8007330 <_printf_i+0x174>
 8007368:	0659      	lsls	r1, r3, #25
 800736a:	bf48      	it	mi
 800736c:	b2b6      	uxthmi	r6, r6
 800736e:	e7e6      	b.n	800733e <_printf_i+0x182>
 8007370:	4615      	mov	r5, r2
 8007372:	e7bb      	b.n	80072ec <_printf_i+0x130>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	6826      	ldr	r6, [r4, #0]
 8007378:	6961      	ldr	r1, [r4, #20]
 800737a:	1d18      	adds	r0, r3, #4
 800737c:	6028      	str	r0, [r5, #0]
 800737e:	0635      	lsls	r5, r6, #24
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	d501      	bpl.n	8007388 <_printf_i+0x1cc>
 8007384:	6019      	str	r1, [r3, #0]
 8007386:	e002      	b.n	800738e <_printf_i+0x1d2>
 8007388:	0670      	lsls	r0, r6, #25
 800738a:	d5fb      	bpl.n	8007384 <_printf_i+0x1c8>
 800738c:	8019      	strh	r1, [r3, #0]
 800738e:	2300      	movs	r3, #0
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	4615      	mov	r5, r2
 8007394:	e7ba      	b.n	800730c <_printf_i+0x150>
 8007396:	682b      	ldr	r3, [r5, #0]
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	602a      	str	r2, [r5, #0]
 800739c:	681d      	ldr	r5, [r3, #0]
 800739e:	6862      	ldr	r2, [r4, #4]
 80073a0:	2100      	movs	r1, #0
 80073a2:	4628      	mov	r0, r5
 80073a4:	f7f8 ff2c 	bl	8000200 <memchr>
 80073a8:	b108      	cbz	r0, 80073ae <_printf_i+0x1f2>
 80073aa:	1b40      	subs	r0, r0, r5
 80073ac:	6060      	str	r0, [r4, #4]
 80073ae:	6863      	ldr	r3, [r4, #4]
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	2300      	movs	r3, #0
 80073b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b8:	e7a8      	b.n	800730c <_printf_i+0x150>
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	462a      	mov	r2, r5
 80073be:	4649      	mov	r1, r9
 80073c0:	4640      	mov	r0, r8
 80073c2:	47d0      	blx	sl
 80073c4:	3001      	adds	r0, #1
 80073c6:	d0ab      	beq.n	8007320 <_printf_i+0x164>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	079b      	lsls	r3, r3, #30
 80073cc:	d413      	bmi.n	80073f6 <_printf_i+0x23a>
 80073ce:	68e0      	ldr	r0, [r4, #12]
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	4298      	cmp	r0, r3
 80073d4:	bfb8      	it	lt
 80073d6:	4618      	movlt	r0, r3
 80073d8:	e7a4      	b.n	8007324 <_printf_i+0x168>
 80073da:	2301      	movs	r3, #1
 80073dc:	4632      	mov	r2, r6
 80073de:	4649      	mov	r1, r9
 80073e0:	4640      	mov	r0, r8
 80073e2:	47d0      	blx	sl
 80073e4:	3001      	adds	r0, #1
 80073e6:	d09b      	beq.n	8007320 <_printf_i+0x164>
 80073e8:	3501      	adds	r5, #1
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	9903      	ldr	r1, [sp, #12]
 80073ee:	1a5b      	subs	r3, r3, r1
 80073f0:	42ab      	cmp	r3, r5
 80073f2:	dcf2      	bgt.n	80073da <_printf_i+0x21e>
 80073f4:	e7eb      	b.n	80073ce <_printf_i+0x212>
 80073f6:	2500      	movs	r5, #0
 80073f8:	f104 0619 	add.w	r6, r4, #25
 80073fc:	e7f5      	b.n	80073ea <_printf_i+0x22e>
 80073fe:	bf00      	nop
 8007400:	08007d77 	.word	0x08007d77
 8007404:	08007d88 	.word	0x08007d88

08007408 <__swbuf_r>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	460e      	mov	r6, r1
 800740c:	4614      	mov	r4, r2
 800740e:	4605      	mov	r5, r0
 8007410:	b118      	cbz	r0, 800741a <__swbuf_r+0x12>
 8007412:	6983      	ldr	r3, [r0, #24]
 8007414:	b90b      	cbnz	r3, 800741a <__swbuf_r+0x12>
 8007416:	f000 f9d1 	bl	80077bc <__sinit>
 800741a:	4b21      	ldr	r3, [pc, #132]	; (80074a0 <__swbuf_r+0x98>)
 800741c:	429c      	cmp	r4, r3
 800741e:	d12b      	bne.n	8007478 <__swbuf_r+0x70>
 8007420:	686c      	ldr	r4, [r5, #4]
 8007422:	69a3      	ldr	r3, [r4, #24]
 8007424:	60a3      	str	r3, [r4, #8]
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	071a      	lsls	r2, r3, #28
 800742a:	d52f      	bpl.n	800748c <__swbuf_r+0x84>
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	b36b      	cbz	r3, 800748c <__swbuf_r+0x84>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	1ac0      	subs	r0, r0, r3
 8007436:	6963      	ldr	r3, [r4, #20]
 8007438:	b2f6      	uxtb	r6, r6
 800743a:	4283      	cmp	r3, r0
 800743c:	4637      	mov	r7, r6
 800743e:	dc04      	bgt.n	800744a <__swbuf_r+0x42>
 8007440:	4621      	mov	r1, r4
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f926 	bl	8007694 <_fflush_r>
 8007448:	bb30      	cbnz	r0, 8007498 <__swbuf_r+0x90>
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	3b01      	subs	r3, #1
 800744e:	60a3      	str	r3, [r4, #8]
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	6022      	str	r2, [r4, #0]
 8007456:	701e      	strb	r6, [r3, #0]
 8007458:	6963      	ldr	r3, [r4, #20]
 800745a:	3001      	adds	r0, #1
 800745c:	4283      	cmp	r3, r0
 800745e:	d004      	beq.n	800746a <__swbuf_r+0x62>
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d506      	bpl.n	8007474 <__swbuf_r+0x6c>
 8007466:	2e0a      	cmp	r6, #10
 8007468:	d104      	bne.n	8007474 <__swbuf_r+0x6c>
 800746a:	4621      	mov	r1, r4
 800746c:	4628      	mov	r0, r5
 800746e:	f000 f911 	bl	8007694 <_fflush_r>
 8007472:	b988      	cbnz	r0, 8007498 <__swbuf_r+0x90>
 8007474:	4638      	mov	r0, r7
 8007476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <__swbuf_r+0x9c>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d101      	bne.n	8007482 <__swbuf_r+0x7a>
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	e7cf      	b.n	8007422 <__swbuf_r+0x1a>
 8007482:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <__swbuf_r+0xa0>)
 8007484:	429c      	cmp	r4, r3
 8007486:	bf08      	it	eq
 8007488:	68ec      	ldreq	r4, [r5, #12]
 800748a:	e7ca      	b.n	8007422 <__swbuf_r+0x1a>
 800748c:	4621      	mov	r1, r4
 800748e:	4628      	mov	r0, r5
 8007490:	f000 f80c 	bl	80074ac <__swsetup_r>
 8007494:	2800      	cmp	r0, #0
 8007496:	d0cb      	beq.n	8007430 <__swbuf_r+0x28>
 8007498:	f04f 37ff 	mov.w	r7, #4294967295
 800749c:	e7ea      	b.n	8007474 <__swbuf_r+0x6c>
 800749e:	bf00      	nop
 80074a0:	08007dbc 	.word	0x08007dbc
 80074a4:	08007ddc 	.word	0x08007ddc
 80074a8:	08007d9c 	.word	0x08007d9c

080074ac <__swsetup_r>:
 80074ac:	4b32      	ldr	r3, [pc, #200]	; (8007578 <__swsetup_r+0xcc>)
 80074ae:	b570      	push	{r4, r5, r6, lr}
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	4606      	mov	r6, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	b125      	cbz	r5, 80074c2 <__swsetup_r+0x16>
 80074b8:	69ab      	ldr	r3, [r5, #24]
 80074ba:	b913      	cbnz	r3, 80074c2 <__swsetup_r+0x16>
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 f97d 	bl	80077bc <__sinit>
 80074c2:	4b2e      	ldr	r3, [pc, #184]	; (800757c <__swsetup_r+0xd0>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	d10f      	bne.n	80074e8 <__swsetup_r+0x3c>
 80074c8:	686c      	ldr	r4, [r5, #4]
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d0:	0719      	lsls	r1, r3, #28
 80074d2:	d42c      	bmi.n	800752e <__swsetup_r+0x82>
 80074d4:	06dd      	lsls	r5, r3, #27
 80074d6:	d411      	bmi.n	80074fc <__swsetup_r+0x50>
 80074d8:	2309      	movs	r3, #9
 80074da:	6033      	str	r3, [r6, #0]
 80074dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295
 80074e6:	e03e      	b.n	8007566 <__swsetup_r+0xba>
 80074e8:	4b25      	ldr	r3, [pc, #148]	; (8007580 <__swsetup_r+0xd4>)
 80074ea:	429c      	cmp	r4, r3
 80074ec:	d101      	bne.n	80074f2 <__swsetup_r+0x46>
 80074ee:	68ac      	ldr	r4, [r5, #8]
 80074f0:	e7eb      	b.n	80074ca <__swsetup_r+0x1e>
 80074f2:	4b24      	ldr	r3, [pc, #144]	; (8007584 <__swsetup_r+0xd8>)
 80074f4:	429c      	cmp	r4, r3
 80074f6:	bf08      	it	eq
 80074f8:	68ec      	ldreq	r4, [r5, #12]
 80074fa:	e7e6      	b.n	80074ca <__swsetup_r+0x1e>
 80074fc:	0758      	lsls	r0, r3, #29
 80074fe:	d512      	bpl.n	8007526 <__swsetup_r+0x7a>
 8007500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007502:	b141      	cbz	r1, 8007516 <__swsetup_r+0x6a>
 8007504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007508:	4299      	cmp	r1, r3
 800750a:	d002      	beq.n	8007512 <__swsetup_r+0x66>
 800750c:	4630      	mov	r0, r6
 800750e:	f7ff fadf 	bl	8006ad0 <_free_r>
 8007512:	2300      	movs	r3, #0
 8007514:	6363      	str	r3, [r4, #52]	; 0x34
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	2300      	movs	r3, #0
 8007520:	6063      	str	r3, [r4, #4]
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f043 0308 	orr.w	r3, r3, #8
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	b94b      	cbnz	r3, 8007546 <__swsetup_r+0x9a>
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800753c:	d003      	beq.n	8007546 <__swsetup_r+0x9a>
 800753e:	4621      	mov	r1, r4
 8007540:	4630      	mov	r0, r6
 8007542:	f000 fa01 	bl	8007948 <__smakebuf_r>
 8007546:	89a0      	ldrh	r0, [r4, #12]
 8007548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800754c:	f010 0301 	ands.w	r3, r0, #1
 8007550:	d00a      	beq.n	8007568 <__swsetup_r+0xbc>
 8007552:	2300      	movs	r3, #0
 8007554:	60a3      	str	r3, [r4, #8]
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	425b      	negs	r3, r3
 800755a:	61a3      	str	r3, [r4, #24]
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	b943      	cbnz	r3, 8007572 <__swsetup_r+0xc6>
 8007560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007564:	d1ba      	bne.n	80074dc <__swsetup_r+0x30>
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	0781      	lsls	r1, r0, #30
 800756a:	bf58      	it	pl
 800756c:	6963      	ldrpl	r3, [r4, #20]
 800756e:	60a3      	str	r3, [r4, #8]
 8007570:	e7f4      	b.n	800755c <__swsetup_r+0xb0>
 8007572:	2000      	movs	r0, #0
 8007574:	e7f7      	b.n	8007566 <__swsetup_r+0xba>
 8007576:	bf00      	nop
 8007578:	20000020 	.word	0x20000020
 800757c:	08007dbc 	.word	0x08007dbc
 8007580:	08007ddc 	.word	0x08007ddc
 8007584:	08007d9c 	.word	0x08007d9c

08007588 <__sflush_r>:
 8007588:	898a      	ldrh	r2, [r1, #12]
 800758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	4605      	mov	r5, r0
 8007590:	0710      	lsls	r0, r2, #28
 8007592:	460c      	mov	r4, r1
 8007594:	d458      	bmi.n	8007648 <__sflush_r+0xc0>
 8007596:	684b      	ldr	r3, [r1, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	dc05      	bgt.n	80075a8 <__sflush_r+0x20>
 800759c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dc02      	bgt.n	80075a8 <__sflush_r+0x20>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	d0f9      	beq.n	80075a2 <__sflush_r+0x1a>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b4:	682f      	ldr	r7, [r5, #0]
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	d032      	beq.n	8007620 <__sflush_r+0x98>
 80075ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	075a      	lsls	r2, r3, #29
 80075c0:	d505      	bpl.n	80075ce <__sflush_r+0x46>
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	1ac0      	subs	r0, r0, r3
 80075c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075c8:	b10b      	cbz	r3, 80075ce <__sflush_r+0x46>
 80075ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075cc:	1ac0      	subs	r0, r0, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	4602      	mov	r2, r0
 80075d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d4:	6a21      	ldr	r1, [r4, #32]
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b0      	blx	r6
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	d106      	bne.n	80075ee <__sflush_r+0x66>
 80075e0:	6829      	ldr	r1, [r5, #0]
 80075e2:	291d      	cmp	r1, #29
 80075e4:	d82c      	bhi.n	8007640 <__sflush_r+0xb8>
 80075e6:	4a2a      	ldr	r2, [pc, #168]	; (8007690 <__sflush_r+0x108>)
 80075e8:	40ca      	lsrs	r2, r1
 80075ea:	07d6      	lsls	r6, r2, #31
 80075ec:	d528      	bpl.n	8007640 <__sflush_r+0xb8>
 80075ee:	2200      	movs	r2, #0
 80075f0:	6062      	str	r2, [r4, #4]
 80075f2:	04d9      	lsls	r1, r3, #19
 80075f4:	6922      	ldr	r2, [r4, #16]
 80075f6:	6022      	str	r2, [r4, #0]
 80075f8:	d504      	bpl.n	8007604 <__sflush_r+0x7c>
 80075fa:	1c42      	adds	r2, r0, #1
 80075fc:	d101      	bne.n	8007602 <__sflush_r+0x7a>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	b903      	cbnz	r3, 8007604 <__sflush_r+0x7c>
 8007602:	6560      	str	r0, [r4, #84]	; 0x54
 8007604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007606:	602f      	str	r7, [r5, #0]
 8007608:	2900      	cmp	r1, #0
 800760a:	d0ca      	beq.n	80075a2 <__sflush_r+0x1a>
 800760c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007610:	4299      	cmp	r1, r3
 8007612:	d002      	beq.n	800761a <__sflush_r+0x92>
 8007614:	4628      	mov	r0, r5
 8007616:	f7ff fa5b 	bl	8006ad0 <_free_r>
 800761a:	2000      	movs	r0, #0
 800761c:	6360      	str	r0, [r4, #52]	; 0x34
 800761e:	e7c1      	b.n	80075a4 <__sflush_r+0x1c>
 8007620:	6a21      	ldr	r1, [r4, #32]
 8007622:	2301      	movs	r3, #1
 8007624:	4628      	mov	r0, r5
 8007626:	47b0      	blx	r6
 8007628:	1c41      	adds	r1, r0, #1
 800762a:	d1c7      	bne.n	80075bc <__sflush_r+0x34>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0c4      	beq.n	80075bc <__sflush_r+0x34>
 8007632:	2b1d      	cmp	r3, #29
 8007634:	d001      	beq.n	800763a <__sflush_r+0xb2>
 8007636:	2b16      	cmp	r3, #22
 8007638:	d101      	bne.n	800763e <__sflush_r+0xb6>
 800763a:	602f      	str	r7, [r5, #0]
 800763c:	e7b1      	b.n	80075a2 <__sflush_r+0x1a>
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	e7ad      	b.n	80075a4 <__sflush_r+0x1c>
 8007648:	690f      	ldr	r7, [r1, #16]
 800764a:	2f00      	cmp	r7, #0
 800764c:	d0a9      	beq.n	80075a2 <__sflush_r+0x1a>
 800764e:	0793      	lsls	r3, r2, #30
 8007650:	680e      	ldr	r6, [r1, #0]
 8007652:	bf08      	it	eq
 8007654:	694b      	ldreq	r3, [r1, #20]
 8007656:	600f      	str	r7, [r1, #0]
 8007658:	bf18      	it	ne
 800765a:	2300      	movne	r3, #0
 800765c:	eba6 0807 	sub.w	r8, r6, r7
 8007660:	608b      	str	r3, [r1, #8]
 8007662:	f1b8 0f00 	cmp.w	r8, #0
 8007666:	dd9c      	ble.n	80075a2 <__sflush_r+0x1a>
 8007668:	6a21      	ldr	r1, [r4, #32]
 800766a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800766c:	4643      	mov	r3, r8
 800766e:	463a      	mov	r2, r7
 8007670:	4628      	mov	r0, r5
 8007672:	47b0      	blx	r6
 8007674:	2800      	cmp	r0, #0
 8007676:	dc06      	bgt.n	8007686 <__sflush_r+0xfe>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	e78e      	b.n	80075a4 <__sflush_r+0x1c>
 8007686:	4407      	add	r7, r0
 8007688:	eba8 0800 	sub.w	r8, r8, r0
 800768c:	e7e9      	b.n	8007662 <__sflush_r+0xda>
 800768e:	bf00      	nop
 8007690:	20400001 	.word	0x20400001

08007694 <_fflush_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	690b      	ldr	r3, [r1, #16]
 8007698:	4605      	mov	r5, r0
 800769a:	460c      	mov	r4, r1
 800769c:	b913      	cbnz	r3, 80076a4 <_fflush_r+0x10>
 800769e:	2500      	movs	r5, #0
 80076a0:	4628      	mov	r0, r5
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	b118      	cbz	r0, 80076ae <_fflush_r+0x1a>
 80076a6:	6983      	ldr	r3, [r0, #24]
 80076a8:	b90b      	cbnz	r3, 80076ae <_fflush_r+0x1a>
 80076aa:	f000 f887 	bl	80077bc <__sinit>
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <_fflush_r+0x6c>)
 80076b0:	429c      	cmp	r4, r3
 80076b2:	d11b      	bne.n	80076ec <_fflush_r+0x58>
 80076b4:	686c      	ldr	r4, [r5, #4]
 80076b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ef      	beq.n	800769e <_fflush_r+0xa>
 80076be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c0:	07d0      	lsls	r0, r2, #31
 80076c2:	d404      	bmi.n	80076ce <_fflush_r+0x3a>
 80076c4:	0599      	lsls	r1, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_fflush_r+0x3a>
 80076c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ca:	f000 f915 	bl	80078f8 <__retarget_lock_acquire_recursive>
 80076ce:	4628      	mov	r0, r5
 80076d0:	4621      	mov	r1, r4
 80076d2:	f7ff ff59 	bl	8007588 <__sflush_r>
 80076d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d8:	07da      	lsls	r2, r3, #31
 80076da:	4605      	mov	r5, r0
 80076dc:	d4e0      	bmi.n	80076a0 <_fflush_r+0xc>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	059b      	lsls	r3, r3, #22
 80076e2:	d4dd      	bmi.n	80076a0 <_fflush_r+0xc>
 80076e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e6:	f000 f908 	bl	80078fa <__retarget_lock_release_recursive>
 80076ea:	e7d9      	b.n	80076a0 <_fflush_r+0xc>
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <_fflush_r+0x70>)
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d101      	bne.n	80076f6 <_fflush_r+0x62>
 80076f2:	68ac      	ldr	r4, [r5, #8]
 80076f4:	e7df      	b.n	80076b6 <_fflush_r+0x22>
 80076f6:	4b04      	ldr	r3, [pc, #16]	; (8007708 <_fflush_r+0x74>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	bf08      	it	eq
 80076fc:	68ec      	ldreq	r4, [r5, #12]
 80076fe:	e7da      	b.n	80076b6 <_fflush_r+0x22>
 8007700:	08007dbc 	.word	0x08007dbc
 8007704:	08007ddc 	.word	0x08007ddc
 8007708:	08007d9c 	.word	0x08007d9c

0800770c <std>:
 800770c:	2300      	movs	r3, #0
 800770e:	b510      	push	{r4, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	e9c0 3300 	strd	r3, r3, [r0]
 8007716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800771a:	6083      	str	r3, [r0, #8]
 800771c:	8181      	strh	r1, [r0, #12]
 800771e:	6643      	str	r3, [r0, #100]	; 0x64
 8007720:	81c2      	strh	r2, [r0, #14]
 8007722:	6183      	str	r3, [r0, #24]
 8007724:	4619      	mov	r1, r3
 8007726:	2208      	movs	r2, #8
 8007728:	305c      	adds	r0, #92	; 0x5c
 800772a:	f7ff f9c9 	bl	8006ac0 <memset>
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x38>)
 8007730:	6263      	str	r3, [r4, #36]	; 0x24
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x3c>)
 8007734:	62a3      	str	r3, [r4, #40]	; 0x28
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <std+0x40>)
 8007738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <std+0x44>)
 800773c:	6224      	str	r4, [r4, #32]
 800773e:	6323      	str	r3, [r4, #48]	; 0x30
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	080079c9 	.word	0x080079c9
 8007748:	080079eb 	.word	0x080079eb
 800774c:	08007a23 	.word	0x08007a23
 8007750:	08007a47 	.word	0x08007a47

08007754 <_cleanup_r>:
 8007754:	4901      	ldr	r1, [pc, #4]	; (800775c <_cleanup_r+0x8>)
 8007756:	f000 b8af 	b.w	80078b8 <_fwalk_reent>
 800775a:	bf00      	nop
 800775c:	08007695 	.word	0x08007695

08007760 <__sfmoreglue>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	2268      	movs	r2, #104	; 0x68
 8007764:	1e4d      	subs	r5, r1, #1
 8007766:	4355      	muls	r5, r2
 8007768:	460e      	mov	r6, r1
 800776a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800776e:	f7ff fa1b 	bl	8006ba8 <_malloc_r>
 8007772:	4604      	mov	r4, r0
 8007774:	b140      	cbz	r0, 8007788 <__sfmoreglue+0x28>
 8007776:	2100      	movs	r1, #0
 8007778:	e9c0 1600 	strd	r1, r6, [r0]
 800777c:	300c      	adds	r0, #12
 800777e:	60a0      	str	r0, [r4, #8]
 8007780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007784:	f7ff f99c 	bl	8006ac0 <memset>
 8007788:	4620      	mov	r0, r4
 800778a:	bd70      	pop	{r4, r5, r6, pc}

0800778c <__sfp_lock_acquire>:
 800778c:	4801      	ldr	r0, [pc, #4]	; (8007794 <__sfp_lock_acquire+0x8>)
 800778e:	f000 b8b3 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	2000083d 	.word	0x2000083d

08007798 <__sfp_lock_release>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__sfp_lock_release+0x8>)
 800779a:	f000 b8ae 	b.w	80078fa <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	2000083d 	.word	0x2000083d

080077a4 <__sinit_lock_acquire>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__sinit_lock_acquire+0x8>)
 80077a6:	f000 b8a7 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	2000083e 	.word	0x2000083e

080077b0 <__sinit_lock_release>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__sinit_lock_release+0x8>)
 80077b2:	f000 b8a2 	b.w	80078fa <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	2000083e 	.word	0x2000083e

080077bc <__sinit>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	f7ff fff0 	bl	80077a4 <__sinit_lock_acquire>
 80077c4:	69a3      	ldr	r3, [r4, #24]
 80077c6:	b11b      	cbz	r3, 80077d0 <__sinit+0x14>
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f7ff bff0 	b.w	80077b0 <__sinit_lock_release>
 80077d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077d4:	6523      	str	r3, [r4, #80]	; 0x50
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <__sinit+0x68>)
 80077d8:	4a13      	ldr	r2, [pc, #76]	; (8007828 <__sinit+0x6c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077de:	42a3      	cmp	r3, r4
 80077e0:	bf04      	itt	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	61a3      	streq	r3, [r4, #24]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f820 	bl	800782c <__sfp>
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f81c 	bl	800782c <__sfp>
 80077f4:	60a0      	str	r0, [r4, #8]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f818 	bl	800782c <__sfp>
 80077fc:	2200      	movs	r2, #0
 80077fe:	60e0      	str	r0, [r4, #12]
 8007800:	2104      	movs	r1, #4
 8007802:	6860      	ldr	r0, [r4, #4]
 8007804:	f7ff ff82 	bl	800770c <std>
 8007808:	68a0      	ldr	r0, [r4, #8]
 800780a:	2201      	movs	r2, #1
 800780c:	2109      	movs	r1, #9
 800780e:	f7ff ff7d 	bl	800770c <std>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	2202      	movs	r2, #2
 8007816:	2112      	movs	r1, #18
 8007818:	f7ff ff78 	bl	800770c <std>
 800781c:	2301      	movs	r3, #1
 800781e:	61a3      	str	r3, [r4, #24]
 8007820:	e7d2      	b.n	80077c8 <__sinit+0xc>
 8007822:	bf00      	nop
 8007824:	08007cb4 	.word	0x08007cb4
 8007828:	08007755 	.word	0x08007755

0800782c <__sfp>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	4607      	mov	r7, r0
 8007830:	f7ff ffac 	bl	800778c <__sfp_lock_acquire>
 8007834:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <__sfp+0x84>)
 8007836:	681e      	ldr	r6, [r3, #0]
 8007838:	69b3      	ldr	r3, [r6, #24]
 800783a:	b913      	cbnz	r3, 8007842 <__sfp+0x16>
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff ffbd 	bl	80077bc <__sinit>
 8007842:	3648      	adds	r6, #72	; 0x48
 8007844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007848:	3b01      	subs	r3, #1
 800784a:	d503      	bpl.n	8007854 <__sfp+0x28>
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	b30b      	cbz	r3, 8007894 <__sfp+0x68>
 8007850:	6836      	ldr	r6, [r6, #0]
 8007852:	e7f7      	b.n	8007844 <__sfp+0x18>
 8007854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007858:	b9d5      	cbnz	r5, 8007890 <__sfp+0x64>
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <__sfp+0x88>)
 800785c:	60e3      	str	r3, [r4, #12]
 800785e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007862:	6665      	str	r5, [r4, #100]	; 0x64
 8007864:	f000 f847 	bl	80078f6 <__retarget_lock_init_recursive>
 8007868:	f7ff ff96 	bl	8007798 <__sfp_lock_release>
 800786c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007874:	6025      	str	r5, [r4, #0]
 8007876:	61a5      	str	r5, [r4, #24]
 8007878:	2208      	movs	r2, #8
 800787a:	4629      	mov	r1, r5
 800787c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007880:	f7ff f91e 	bl	8006ac0 <memset>
 8007884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800788c:	4620      	mov	r0, r4
 800788e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007890:	3468      	adds	r4, #104	; 0x68
 8007892:	e7d9      	b.n	8007848 <__sfp+0x1c>
 8007894:	2104      	movs	r1, #4
 8007896:	4638      	mov	r0, r7
 8007898:	f7ff ff62 	bl	8007760 <__sfmoreglue>
 800789c:	4604      	mov	r4, r0
 800789e:	6030      	str	r0, [r6, #0]
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d1d5      	bne.n	8007850 <__sfp+0x24>
 80078a4:	f7ff ff78 	bl	8007798 <__sfp_lock_release>
 80078a8:	230c      	movs	r3, #12
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	e7ee      	b.n	800788c <__sfp+0x60>
 80078ae:	bf00      	nop
 80078b0:	08007cb4 	.word	0x08007cb4
 80078b4:	ffff0001 	.word	0xffff0001

080078b8 <_fwalk_reent>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4606      	mov	r6, r0
 80078be:	4688      	mov	r8, r1
 80078c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078c4:	2700      	movs	r7, #0
 80078c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ca:	f1b9 0901 	subs.w	r9, r9, #1
 80078ce:	d505      	bpl.n	80078dc <_fwalk_reent+0x24>
 80078d0:	6824      	ldr	r4, [r4, #0]
 80078d2:	2c00      	cmp	r4, #0
 80078d4:	d1f7      	bne.n	80078c6 <_fwalk_reent+0xe>
 80078d6:	4638      	mov	r0, r7
 80078d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d907      	bls.n	80078f2 <_fwalk_reent+0x3a>
 80078e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e6:	3301      	adds	r3, #1
 80078e8:	d003      	beq.n	80078f2 <_fwalk_reent+0x3a>
 80078ea:	4629      	mov	r1, r5
 80078ec:	4630      	mov	r0, r6
 80078ee:	47c0      	blx	r8
 80078f0:	4307      	orrs	r7, r0
 80078f2:	3568      	adds	r5, #104	; 0x68
 80078f4:	e7e9      	b.n	80078ca <_fwalk_reent+0x12>

080078f6 <__retarget_lock_init_recursive>:
 80078f6:	4770      	bx	lr

080078f8 <__retarget_lock_acquire_recursive>:
 80078f8:	4770      	bx	lr

080078fa <__retarget_lock_release_recursive>:
 80078fa:	4770      	bx	lr

080078fc <__swhatbuf_r>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	460e      	mov	r6, r1
 8007900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007904:	2900      	cmp	r1, #0
 8007906:	b096      	sub	sp, #88	; 0x58
 8007908:	4614      	mov	r4, r2
 800790a:	461d      	mov	r5, r3
 800790c:	da08      	bge.n	8007920 <__swhatbuf_r+0x24>
 800790e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	061a      	lsls	r2, r3, #24
 8007918:	d410      	bmi.n	800793c <__swhatbuf_r+0x40>
 800791a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791e:	e00e      	b.n	800793e <__swhatbuf_r+0x42>
 8007920:	466a      	mov	r2, sp
 8007922:	f000 f8b7 	bl	8007a94 <_fstat_r>
 8007926:	2800      	cmp	r0, #0
 8007928:	dbf1      	blt.n	800790e <__swhatbuf_r+0x12>
 800792a:	9a01      	ldr	r2, [sp, #4]
 800792c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007930:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007934:	425a      	negs	r2, r3
 8007936:	415a      	adcs	r2, r3
 8007938:	602a      	str	r2, [r5, #0]
 800793a:	e7ee      	b.n	800791a <__swhatbuf_r+0x1e>
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	2000      	movs	r0, #0
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	b016      	add	sp, #88	; 0x58
 8007944:	bd70      	pop	{r4, r5, r6, pc}
	...

08007948 <__smakebuf_r>:
 8007948:	898b      	ldrh	r3, [r1, #12]
 800794a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800794c:	079d      	lsls	r5, r3, #30
 800794e:	4606      	mov	r6, r0
 8007950:	460c      	mov	r4, r1
 8007952:	d507      	bpl.n	8007964 <__smakebuf_r+0x1c>
 8007954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	6123      	str	r3, [r4, #16]
 800795c:	2301      	movs	r3, #1
 800795e:	6163      	str	r3, [r4, #20]
 8007960:	b002      	add	sp, #8
 8007962:	bd70      	pop	{r4, r5, r6, pc}
 8007964:	ab01      	add	r3, sp, #4
 8007966:	466a      	mov	r2, sp
 8007968:	f7ff ffc8 	bl	80078fc <__swhatbuf_r>
 800796c:	9900      	ldr	r1, [sp, #0]
 800796e:	4605      	mov	r5, r0
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff f919 	bl	8006ba8 <_malloc_r>
 8007976:	b948      	cbnz	r0, 800798c <__smakebuf_r+0x44>
 8007978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797c:	059a      	lsls	r2, r3, #22
 800797e:	d4ef      	bmi.n	8007960 <__smakebuf_r+0x18>
 8007980:	f023 0303 	bic.w	r3, r3, #3
 8007984:	f043 0302 	orr.w	r3, r3, #2
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	e7e3      	b.n	8007954 <__smakebuf_r+0xc>
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <__smakebuf_r+0x7c>)
 800798e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	6020      	str	r0, [r4, #0]
 8007994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	9b00      	ldr	r3, [sp, #0]
 800799c:	6163      	str	r3, [r4, #20]
 800799e:	9b01      	ldr	r3, [sp, #4]
 80079a0:	6120      	str	r0, [r4, #16]
 80079a2:	b15b      	cbz	r3, 80079bc <__smakebuf_r+0x74>
 80079a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f885 	bl	8007ab8 <_isatty_r>
 80079ae:	b128      	cbz	r0, 80079bc <__smakebuf_r+0x74>
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f023 0303 	bic.w	r3, r3, #3
 80079b6:	f043 0301 	orr.w	r3, r3, #1
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	89a0      	ldrh	r0, [r4, #12]
 80079be:	4305      	orrs	r5, r0
 80079c0:	81a5      	strh	r5, [r4, #12]
 80079c2:	e7cd      	b.n	8007960 <__smakebuf_r+0x18>
 80079c4:	08007755 	.word	0x08007755

080079c8 <__sread>:
 80079c8:	b510      	push	{r4, lr}
 80079ca:	460c      	mov	r4, r1
 80079cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d0:	f000 f894 	bl	8007afc <_read_r>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	bfab      	itete	ge
 80079d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079da:	89a3      	ldrhlt	r3, [r4, #12]
 80079dc:	181b      	addge	r3, r3, r0
 80079de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079e2:	bfac      	ite	ge
 80079e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80079e6:	81a3      	strhlt	r3, [r4, #12]
 80079e8:	bd10      	pop	{r4, pc}

080079ea <__swrite>:
 80079ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ee:	461f      	mov	r7, r3
 80079f0:	898b      	ldrh	r3, [r1, #12]
 80079f2:	05db      	lsls	r3, r3, #23
 80079f4:	4605      	mov	r5, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	4616      	mov	r6, r2
 80079fa:	d505      	bpl.n	8007a08 <__swrite+0x1e>
 80079fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a00:	2302      	movs	r3, #2
 8007a02:	2200      	movs	r2, #0
 8007a04:	f000 f868 	bl	8007ad8 <_lseek_r>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a12:	81a3      	strh	r3, [r4, #12]
 8007a14:	4632      	mov	r2, r6
 8007a16:	463b      	mov	r3, r7
 8007a18:	4628      	mov	r0, r5
 8007a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1e:	f000 b817 	b.w	8007a50 <_write_r>

08007a22 <__sseek>:
 8007a22:	b510      	push	{r4, lr}
 8007a24:	460c      	mov	r4, r1
 8007a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2a:	f000 f855 	bl	8007ad8 <_lseek_r>
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	bf15      	itete	ne
 8007a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a3e:	81a3      	strheq	r3, [r4, #12]
 8007a40:	bf18      	it	ne
 8007a42:	81a3      	strhne	r3, [r4, #12]
 8007a44:	bd10      	pop	{r4, pc}

08007a46 <__sclose>:
 8007a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4a:	f000 b813 	b.w	8007a74 <_close_r>
	...

08007a50 <_write_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4d07      	ldr	r5, [pc, #28]	; (8007a70 <_write_r+0x20>)
 8007a54:	4604      	mov	r4, r0
 8007a56:	4608      	mov	r0, r1
 8007a58:	4611      	mov	r1, r2
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	602a      	str	r2, [r5, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f7fa fb9b 	bl	800219a <_write>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_write_r+0x1e>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_write_r+0x1e>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20000838 	.word	0x20000838

08007a74 <_close_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d06      	ldr	r5, [pc, #24]	; (8007a90 <_close_r+0x1c>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	602b      	str	r3, [r5, #0]
 8007a80:	f7fa fba7 	bl	80021d2 <_close>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_close_r+0x1a>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_close_r+0x1a>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	20000838 	.word	0x20000838

08007a94 <_fstat_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	; (8007ab4 <_fstat_r+0x20>)
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	f7fa fba2 	bl	80021ea <_fstat>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	d102      	bne.n	8007ab0 <_fstat_r+0x1c>
 8007aaa:	682b      	ldr	r3, [r5, #0]
 8007aac:	b103      	cbz	r3, 8007ab0 <_fstat_r+0x1c>
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	bd38      	pop	{r3, r4, r5, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000838 	.word	0x20000838

08007ab8 <_isatty_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d06      	ldr	r5, [pc, #24]	; (8007ad4 <_isatty_r+0x1c>)
 8007abc:	2300      	movs	r3, #0
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	f7fa fba1 	bl	800220a <_isatty>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_isatty_r+0x1a>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_isatty_r+0x1a>
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	20000838 	.word	0x20000838

08007ad8 <_lseek_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d07      	ldr	r5, [pc, #28]	; (8007af8 <_lseek_r+0x20>)
 8007adc:	4604      	mov	r4, r0
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f7fa fb9a 	bl	8002220 <_lseek>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_lseek_r+0x1e>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_lseek_r+0x1e>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20000838 	.word	0x20000838

08007afc <_read_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	; (8007b1c <_read_r+0x20>)
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f7fa fb28 	bl	8002160 <_read>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_read_r+0x1e>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_read_r+0x1e>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000838 	.word	0x20000838

08007b20 <_init>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr

08007b2c <_fini>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr
